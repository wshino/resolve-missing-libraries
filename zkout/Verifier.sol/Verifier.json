{"abi":[{"type":"constructor","inputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"DOMAIN_BYTES","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"DOMAIN_FIELDS","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"SUBJECT_BYTES","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"SUBJECT_FIELDS","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"UPGRADE_INTERFACE_VERSION","inputs":[],"outputs":[{"name":"","type":"string","internalType":"string"}],"stateMutability":"view"},{"type":"function","name":"_packBytes2Fields","inputs":[{"name":"_bytes","type":"bytes","internalType":"bytes"},{"name":"_paddedSize","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"uint256[]","internalType":"uint256[]"}],"stateMutability":"pure"},{"type":"function","name":"initialize","inputs":[{"name":"_initialOwner","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"owner","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"proxiableUUID","inputs":[],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"renounceOwnership","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"transferOwnership","inputs":[{"name":"newOwner","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"upgradeToAndCall","inputs":[{"name":"newImplementation","type":"address","internalType":"address"},{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"verifyEmailProof","inputs":[{"name":"proof","type":"tuple","internalType":"struct EmailProof","components":[{"name":"domainName","type":"string","internalType":"string"},{"name":"publicKeyHash","type":"bytes32","internalType":"bytes32"},{"name":"timestamp","type":"uint256","internalType":"uint256"},{"name":"maskedSubject","type":"string","internalType":"string"},{"name":"emailNullifier","type":"bytes32","internalType":"bytes32"},{"name":"accountSalt","type":"bytes32","internalType":"bytes32"},{"name":"isCodeExist","type":"bool","internalType":"bool"},{"name":"proof","type":"bytes","internalType":"bytes"}]}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"event","name":"Initialized","inputs":[{"name":"version","type":"uint64","indexed":false,"internalType":"uint64"}],"anonymous":false},{"type":"event","name":"OwnershipTransferred","inputs":[{"name":"previousOwner","type":"address","indexed":true,"internalType":"address"},{"name":"newOwner","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"event","name":"Upgraded","inputs":[{"name":"implementation","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"error","name":"AddressEmptyCode","inputs":[{"name":"target","type":"address","internalType":"address"}]},{"type":"error","name":"ERC1967InvalidImplementation","inputs":[{"name":"implementation","type":"address","internalType":"address"}]},{"type":"error","name":"ERC1967NonPayable","inputs":[]},{"type":"error","name":"FailedInnerCall","inputs":[]},{"type":"error","name":"InvalidInitialization","inputs":[]},{"type":"error","name":"NotInitializing","inputs":[]},{"type":"error","name":"OwnableInvalidOwner","inputs":[{"name":"owner","type":"address","internalType":"address"}]},{"type":"error","name":"OwnableUnauthorizedAccount","inputs":[{"name":"account","type":"address","internalType":"address"}]},{"type":"error","name":"UUPSUnauthorizedCallContext","inputs":[]},{"type":"error","name":"UUPSUnsupportedProxiableUUID","inputs":[{"name":"slot","type":"bytes32","internalType":"bytes32"}]}],"bytecode":{"object":""},"assembly":"\t.text\n\t.file\t\"Verifier.sol:Verifier\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tnop\tstack+=[6 + r0]\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tptr.add\tr1, r3, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_1\n\tadd\t128, r0, r8\n\tst.1\t64, r8\n\tsub.s!\t4, r3, r2\n\tjump.lt\t@.BB0_2\n\tld\tr1, r2\n\tshr.s\t224, r2, r4\n\tsub.s!\t@CPI0_2[0], r4, r2\n\tjump.le\t@.BB0_6\n\tptr.add\tr1, r3, r2\n\tsub.s!\t@CPI0_3[0], r4, r5\n\tjump.le\t@.BB0_14\n\tsub.s!\t@CPI0_4[0], r4, r5\n\tjump.gt\t@.BB0_20\n\tsub.s!\t@CPI0_7[0], r4, r2\n\tjump.eq\t@.BB0_253\n\tsub.s!\t@CPI0_8[0], r4, r2\n\tjump.ne\t@.BB0_2\n\tsub.s!\t36, r3, r2\n\tjump.lt\t@.BB0_2\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tadd\tr1, r0, stack-[4]\n\tsub.s!\t@CPI0_19[0], r1, r1\n\tjump.gt\t@.BB0_2\n\tadd\t@CPI0_23[0], r0, r1\n\tsload\tr1, r2\n\tand\t@CPI0_24[0], r2, r4\n\tand!\t@CPI0_20[0], r2, r1\n\tjump.eq\t@.BB0_261\n\tsub.s!\t1, r1, r1\n\tjump.ne\t@.BB0_263\n\tadd\tr2, r0, stack-[2]\n\tadd\tr4, r0, stack-[3]\n\tadd\t@CPI0_25[0], r0, r1\n\tst.2\t0, r1\n\tcontext.this\tr1\n\tst.2\t4, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_26[0], r1, r1\n\tadd\t32770, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_39\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tadd\tstack-[3], r0, r4\n\tadd\tstack-[2], r0, r2\n\tjump.eq\t@.BB0_264\n.BB0_263:\n\tadd\t@CPI0_45[0], r0, r1\n\tst.1\t0, r1\n\tadd\t@CPI0_44[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_1:\n\tadd\t160, r0, r1\n\tst.1\t64, r1\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tcontext.this\tr1\n\tst.1\t128, r1\n\tst.2\t320, r0\n\tst.2\t352, r1\n\tadd\t32, r0, r1\n\tst.2\t256, r1\n\tadd\t1, r0, r1\n\tst.2\t288, r1\n\tadd\t@CPI0_1[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_6:\n\tsub.s!\t@CPI0_12[0], r4, r2\n\tjump.gt\t@.BB0_10\n\tsub.s!\t@CPI0_16[0], r4, r2\n\tjump.eq\t@.BB0_22\n\tsub.s!\t@CPI0_17[0], r4, r2\n\tjump.eq\t@.BB0_25\n\tsub.s!\t@CPI0_18[0], r4, r1\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t605, r0, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_46[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_14:\n\tsub.s!\t@CPI0_9[0], r4, r5\n\tjump.eq\t@.BB0_103\n\tsub.s!\t@CPI0_10[0], r4, r5\n\tjump.eq\t@.BB0_105\n\tsub.s!\t@CPI0_11[0], r4, r1\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t192, r0, r1\n\tst.1\t64, r1\n\tadd\t5, r0, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_47[0], r0, r2\n\tst.1\t160, r2\n\tadd\t32, r0, r2\n\tst.1\t192, r2\n\tst.1\t224, r1\n\tld.1\t256, r1\n\tand\t@CPI0_48[0], r1, r1\n\tor\t@CPI0_47[0], r1, r1\n\tst.1\t256, r1\n\tst.1\t261, r0\n\tadd\t@CPI0_49[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_10:\n\tsub.s!\t@CPI0_13[0], r4, r1\n\tjump.eq\t@.BB0_92\n\tsub.s!\t@CPI0_14[0], r4, r1\n\tjump.eq\t@.BB0_96\n\tsub.s!\t@CPI0_15[0], r4, r1\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t255, r0, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_46[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_20:\n\tsub.s!\t@CPI0_5[0], r4, r5\n\tjump.eq\t@.BB0_282\n\tsub.s!\t@CPI0_6[0], r4, r2\n\tjump.ne\t@.BB0_2\n\tsub.s!\t36, r3, r2\n\tjump.lt\t@.BB0_2\n\tcontext.get_context_u128\tr2\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tadd\tr1, r0, stack-[4]\n\tsub.s!\t@CPI0_19[0], r1, r1\n\tjump.gt\t@.BB0_2\n\tnear_call\tr0, @fun_checkOwner, @DEFAULT_UNWIND\n\tadd\tstack-[4], r0, r1\n\tnear_call\tr0, @fun_transferOwnership_inner, @DEFAULT_UNWIND\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_253:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t9, r0, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_46[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_282:\n\tsub.s!\t68, r3, r4\n\tjump.lt\t@.BB0_2\n\tcontext.get_context_u128\tr4\n\tsub!\tr4, r0, r4\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r4\n\tld\tr4, r5\n\tsub.s!\t@CPI0_20[0], r5, r4\n\tjump.gt\t@.BB0_2\n\tadd\t35, r5, r4\n\tsub!\tr4, r3, r4\n\tjump.ge\t@.BB0_2\n\tadd\t4, r5, r6\n\tptr.add\tr1, r6, r4\n\tld\tr4, r4\n\tsub.s!\t@CPI0_20[0], r4, r7\n\tjump.gt\t@.BB0_30\n\tadd\t31, r4, r7\n\tand\t@CPI0_75[0], r7, r7\n\tadd\t63, r7, r7\n\tand\t@CPI0_75[0], r7, r7\n\tsub.s!\t@CPI0_21[0], r7, r8\n\tjump.gt\t@.BB0_30\n\tadd\t36, r5, r5\n\tadd\t128, r7, r7\n\tst.1\t64, r7\n\tst.1\t128, r4\n\tadd\tr4, r5, r5\n\tsub!\tr5, r3, r3\n\tjump.gt\t@.BB0_2\n\tadd\t32, r6, r3\n\tptr.add\tr1, r3, r3\n\tand\t31, r4, r5\n\tshr.s!\t5, r4, r6\n\tshl.s\t5, r6, r6\n\tjump.eq\t@.BB0_292\n\tadd\t160, r0, r7\n\tadd\t160, r6, r8\n\tptr.add\tr3, r0, r9\n.BB0_291:\n\tld.inc\tr9, r10, r9\n\tst.1.inc\tr7, r10, r7\n\tsub!\tr7, r8, r10\n\tjump.ne\t@.BB0_291\n.BB0_292:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_294\n\tptr.add\tr3, r6, r3\n\tshl.s\t3, r5, r5\n\tadd\t160, r6, r6\n\tld.1\tr6, r7\n\tshl\tr7, r5, r7\n\tshr\tr7, r5, r7\n\tld\tr3, r3\n\tsub\t256, r5, r5\n\tshr\tr3, r5, r3\n\tshl\tr3, r5, r3\n\tor\tr3, r7, r3\n\tst.1\tr6, r3\n.BB0_294:\n\tadd\t160, r4, r3\n\tst.1\tr3, r0\n\tptr.add.s\t36, r1, r1\n\tld\tr1, r3\n\tdiv.s\t31, r3, r4, r1\n\tsub!\tr1, r0, r1\n\tadd.ne\t1, r4, r4\n\tsub.s!\t@CPI0_20[0], r4, r1\n\tjump.gt\t@.BB0_30\n\tshl.s\t5, r4, r7\n\tadd\t63, r7, r1\n\tand\t@CPI0_22[0], r1, r1\n\tld.1\t64, r5\n\tadd\tr5, r1, r1\n\tsub!\tr1, r5, r6\n\tadd\t0, r0, r6\n\tadd.lt\t1, r0, r6\n\tsub.s!\t@CPI0_20[0], r1, r8\n\tjump.gt\t@.BB0_30\n\tand!\t1, r6, r6\n\tjump.ne\t@.BB0_30\n\tst.1\t64, r1\n\tst.1.inc\tr5, r4, r1\n\tand\t31, r7, r6\n\tshr.s!\t5, r7, r7\n\tjump.eq\t@.BB0_300\n\tshl.s\t5, r7, r7\n\tadd\tr1, r7, r7\n\tadd\tr1, r0, r8\n.BB0_299:\n\tld.inc\tr2, r9, r2\n\tst.1.inc\tr8, r9, r8\n\tsub!\tr8, r7, r9\n\tjump.ne\t@.BB0_299\n.BB0_300:\n\tsub!\tr6, r0, r2\n\tjump.eq\t@.BB0_302\n.BB0_302:\n\tsub!\tr4, r0, r2\n\tjump.ne\t@.BB0_303\n.BB0_315:\n\tld.1\t64, r2\n\tadd\t32, r0, r3\n\tst.1.inc\tr2, r3, r3\n\tld.1\tr5, r4\n\tst.1\tr3, r4\n\tadd\t64, r2, r3\n\tsub!\tr4, r0, r5\n\tjump.eq\t@.BB0_327\n\tadd\tr0, r0, r5\n.BB0_326:\n\tld.1.inc\tr1, r6, r1\n\tst.1.inc\tr3, r6, r3\n\tadd\t1, r5, r5\n\tsub!\tr5, r4, r6\n\tjump.lt\t@.BB0_326\n.BB0_327:\n\tsub\tr3, r2, r1\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t96, r1, r1\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\t@CPI0_0[0], r0, r2\n\tshl.s\t64, r2, r2\n\tor\tr1, r2, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_103:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t@CPI0_30[0], r0, r1\n\tsload\tr1, r1\n\tand\t@CPI0_19[0], r1, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_46[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_105:\n\tsub.s!\t36, r3, r4\n\tjump.lt\t@.BB0_2\n\tcontext.get_context_u128\tr4\n\tsub!\tr4, r0, r4\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r4\n\tld\tr4, r4\n\tsub.s!\t@CPI0_20[0], r4, r5\n\tjump.gt\t@.BB0_2\n\tsub\tr3, r4, r5\n\tsub.s!\t@CPI0_50[0], r5, r6\n\tjump.gt\t@.BB0_2\n\tsub.s!\t260, r5, r5\n\tjump.lt\t@.BB0_2\n\tadd\t384, r0, r7\n\tst.1\t64, r7\n\tadd\t4, r4, r6\n\tptr.add\tr1, r6, r5\n\tld\tr5, r5\n\tsub.s!\t@CPI0_20[0], r5, r8\n\tjump.gt\t@.BB0_2\n\tadd\tr5, r4, r10\n\tadd\t35, r10, r5\n\tsub!\tr5, r3, r5\n\tjump.ge\t@.BB0_2\n\tadd\t4, r10, r9\n\tptr.add\tr1, r9, r5\n\tld\tr5, r8\n\tsub.s!\t@CPI0_20[0], r8, r5\n\tjump.gt\t@.BB0_30\n\tadd\t31, r8, r11\n\tand\t@CPI0_75[0], r11, r11\n\tadd\t63, r11, r11\n\tand\t@CPI0_75[0], r11, r11\n\tsub.s!\t@CPI0_51[0], r11, r12\n\tjump.gt\t@.BB0_30\n\tadd\t36, r10, r10\n\tadd\t384, r11, r11\n\tst.1\t64, r11\n\tst.1\t384, r8\n\tadd\tr8, r10, r10\n\tsub!\tr10, r3, r10\n\tjump.gt\t@.BB0_2\n\tadd\t32, r9, r9\n\tptr.add\tr1, r9, r9\n\tand\t31, r8, r10\n\tshr.s!\t5, r8, r11\n\tjump.eq\t@.BB0_118\n\tadd\t416, r0, r12\n\tshl.s\t5, r11, r13\n\tadd\t416, r13, r13\n\tptr.add\tr9, r0, r14\n.BB0_117:\n\tld.inc\tr14, r15, r14\n\tst.1.inc\tr12, r15, r12\n\tsub!\tr12, r13, r15\n\tjump.ne\t@.BB0_117\n.BB0_118:\n\tsub!\tr10, r0, r12\n\tjump.eq\t@.BB0_120\n\tshl.s\t5, r11, r11\n\tptr.add\tr9, r11, r9\n\tshl.s\t3, r10, r10\n\tadd\t416, r11, r11\n\tld.1\tr11, r12\n\tshl\tr12, r10, r12\n\tshr\tr12, r10, r12\n\tld\tr9, r9\n\tsub\t256, r10, r10\n\tshr\tr9, r10, r9\n\tshl\tr9, r10, r9\n\tor\tr9, r12, r9\n\tst.1\tr11, r9\n.BB0_120:\n\tadd\t416, r8, r8\n\tst.1\tr8, r0\n\tst.1\t128, r7\n\tadd\t32, r6, r7\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\t160, r7\n\tadd\t64, r6, r7\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\t192, r7\n\tadd\t96, r6, r6\n\tptr.add\tr1, r6, r7\n\tld\tr7, r7\n\tsub.s!\t@CPI0_20[0], r7, r8\n\tjump.gt\t@.BB0_2\n\tadd\tr7, r4, r9\n\tadd\t35, r9, r7\n\tsub!\tr7, r3, r7\n\tjump.ge\t@.BB0_2\n\tadd\t4, r9, r10\n\tptr.add\tr1, r10, r7\n\tld\tr7, r7\n\tsub.s!\t@CPI0_20[0], r7, r8\n\tjump.gt\t@.BB0_30\n\tadd\t31, r7, r8\n\tand\t@CPI0_75[0], r8, r8\n\tadd\t63, r8, r8\n\tand\t@CPI0_75[0], r8, r11\n\tld.1\t64, r8\n\tadd\tr8, r11, r11\n\tsub!\tr11, r8, r12\n\tadd\t0, r0, r12\n\tadd.lt\t1, r0, r12\n\tsub.s!\t@CPI0_20[0], r11, r13\n\tjump.gt\t@.BB0_30\n\tand!\t1, r12, r12\n\tjump.ne\t@.BB0_30\n\tadd\t36, r9, r12\n\tst.1\t64, r11\n\tst.1.inc\tr8, r7, r9\n\tadd\tr7, r12, r11\n\tsub!\tr11, r3, r11\n\tjump.gt\t@.BB0_2\n\tadd\t32, r10, r10\n\tptr.add\tr1, r10, stack-[4]\n\tand\t31, r7, r10\n\tshr.s!\t5, r7, r12\n\tjump.eq\t@.BB0_129\n\tshl.s\t5, r12, r13\n\tadd\tr9, r13, r13\n\tptr.add\tstack-[4], r0, r14\n\tadd\tr9, r0, r15\n.BB0_128:\n\tld.inc\tr14, r11, r14\n\tst.1.inc\tr15, r11, r15\n\tsub!\tr15, r13, r11\n\tjump.ne\t@.BB0_128\n.BB0_129:\n\tsub!\tr10, r0, r11\n\tjump.eq\t@.BB0_131\n\tshl.s\t5, r12, r11\n\tptr.add\tstack-[4], r11, r12\n\tadd\tr9, r11, r11\n\tshl.s\t3, r10, r10\n\tld.1\tr11, r13\n\tshl\tr13, r10, r13\n\tshr\tr13, r10, r13\n\tld\tr12, r12\n\tsub\t256, r10, r10\n\tshr\tr12, r10, r12\n\tshl\tr12, r10, r10\n\tor\tr10, r13, r10\n\tst.1\tr11, r10\n.BB0_131:\n\tadd\tr9, r7, r7\n\tst.1\tr7, r0\n\tst.1\t224, r8\n\tadd\t32, r6, r7\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\t256, r7\n\tadd\t64, r6, r7\n\tptr.add\tr1, r7, r7\n\tld\tr7, r7\n\tst.1\t288, r7\n\tadd\t96, r6, r6\n\tptr.add\tr1, r6, r7\n\tld\tr7, r7\n\tsub!\tr7, r0, r8\n\tadd\t0, r0, r8\n\tadd.ne\t1, r0, r8\n\tsub!\tr7, r8, r8\n\tjump.ne\t@.BB0_2\n\tst.1\t320, r7\n\tadd\t32, r6, r6\n\tptr.add\tr1, r6, r6\n\tld\tr6, r6\n\tsub.s!\t@CPI0_20[0], r6, r7\n\tjump.gt\t@.BB0_2\n\tadd\tr6, r4, r8\n\tadd\t35, r8, r4\n\tsub!\tr4, r3, r4\n\tjump.ge\t@.BB0_2\n\tadd\t4, r8, r7\n\tptr.add\tr1, r7, r4\n\tld\tr4, r4\n\tsub.s!\t@CPI0_20[0], r4, r6\n\tjump.gt\t@.BB0_30\n\tadd\t31, r4, r6\n\tand\t@CPI0_75[0], r6, r6\n\tadd\t63, r6, r6\n\tand\t@CPI0_75[0], r6, r5\n\tld.1\t64, r6\n\tadd\tr6, r5, r5\n\tsub!\tr5, r6, r9\n\tadd\t0, r0, r9\n\tadd.lt\t1, r0, r9\n\tsub.s!\t@CPI0_20[0], r5, r10\n\tjump.gt\t@.BB0_30\n\tand!\t1, r9, r9\n\tjump.ne\t@.BB0_30\n\tadd\t36, r8, r8\n\tst.1\t64, r5\n\tst.1.inc\tr6, r4, r5\n\tadd\tr4, r8, r8\n\tsub!\tr8, r3, r3\n\tjump.gt\t@.BB0_2\n\tadd\t32, r7, r3\n\tptr.add\tr1, r3, r3\n\tand\t31, r4, r1\n\tshr.s!\t5, r4, r7\n\tjump.eq\t@.BB0_141\n\tshl.s\t5, r7, r8\n\tadd\tr5, r8, r8\n\tptr.add\tr3, r0, r9\n\tadd\tr5, r0, r10\n.BB0_140:\n\tld.inc\tr9, r11, r9\n\tst.1.inc\tr10, r11, r10\n\tsub!\tr10, r8, r11\n\tjump.ne\t@.BB0_140\n.BB0_141:\n\tsub!\tr1, r0, r8\n\tjump.eq\t@.BB0_143\n\tshl.s\t5, r7, r7\n\tptr.add\tr3, r7, r3\n\tadd\tr5, r7, r7\n\tshl.s\t3, r1, r1\n\tld.1\tr7, r8\n\tshl\tr8, r1, r8\n\tshr\tr8, r1, r8\n\tld\tr3, r3\n\tsub\t256, r1, r1\n\tshr\tr3, r1, r3\n\tshl\tr3, r1, r1\n\tor\tr1, r8, r1\n\tst.1\tr7, r1\n.BB0_143:\n\tadd\tr5, r4, r1\n\tst.1\tr1, r0\n\tst.1\t352, r6\n\tld.1\tr6, r1\n\tsub.s!\t@CPI0_50[0], r1, r3\n\tjump.gt\t@.BB0_2\n\tsub.s!\t256, r1, r3\n\tjump.lt\t@.BB0_2\n\tadd\t63, r6, r3\n\tadd\tr1, r5, r7\n\tsub!\tr3, r7, r1\n\tadd\tr0, r0, r1\n\tadd.ge\t@CPI0_52[0], r0, r1\n\tand\t@CPI0_52[0], r7, r4\n\tand\t@CPI0_52[0], r3, r3\n\txor\tr3, r4, r8\n\tsub!\tr3, r4, r3\n\tadd\tr0, r0, r3\n\tadd.lt\t@CPI0_52[0], r0, r3\n\tsub.s!\t@CPI0_52[0], r8, r4\n\tadd.ne\tr1, r0, r3\n\tsub!\tr3, r0, r1\n\tjump.ne\t@.BB0_2\n\tld.1\t64, r1\n\tsub.s!\t@CPI0_53[0], r1, r3\n\tjump.gt\t@.BB0_30\n\tadd\t64, r1, r3\n\tst.1\t64, r3\n\tadd\t96, r6, r4\n\tsub!\tr4, r7, r3\n\tjump.gt\t@.BB0_2\n\tsub.s!\t@CPI0_76[0], r5, r3\n\tjump.gt\t@.BB0_151\n\tadd\tr1, r0, r3\n.BB0_150:\n\tld.1.inc\tr5, r9, r5\n\tst.1.inc\tr3, r9, r3\n\tsub!\tr5, r4, r9\n\tjump.lt\t@.BB0_150\n.BB0_151:\n\tadd\t127, r6, r3\n\tsub!\tr3, r7, r5\n\tadd\tr0, r0, r5\n\tadd.ge\t@CPI0_52[0], r0, r5\n\tand\t@CPI0_52[0], r7, r9\n\tand\t@CPI0_52[0], r3, r3\n\txor\tr3, r9, r10\n\tsub!\tr3, r9, r3\n\tadd\tr0, r0, r3\n\tadd.lt\t@CPI0_52[0], r0, r3\n\tsub.s!\t@CPI0_52[0], r10, r9\n\tadd.ne\tr5, r0, r3\n\tsub!\tr3, r0, r3\n\tjump.ne\t@.BB0_2\n\tld.1\t64, r3\n\tsub.s!\t@CPI0_53[0], r3, r5\n\tjump.gt\t@.BB0_30\n\tadd\t64, r3, r5\n\tst.1\t64, r5\n\tadd\t224, r6, r9\n\tsub!\tr9, r7, r5\n\tjump.gt\t@.BB0_2\n\tsub!\tr4, r9, r5\n\tjump.ge\t@.BB0_163\n\tadd\tr3, r0, r5\n\tjump\t@.BB0_156\n.BB0_22:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t20, r0, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_46[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_92:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t@CPI0_62[0], r0, r1\n\tst.2\t0, r1\n\tcontext.code_source\tr1\n\tst.2\t4, r1\n\tst.2\t36, r0\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_63[0], r1, r1\n\tadd\t32773, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_39\n\tld\tr1, r1\n\tand\t@CPI0_19[0], r1, r1\n\tcontext.this\tr2\n\tsub!\tr2, r1, r1\n\tjump.ne\t@.BB0_42\n\tld.1\t64, r1\n\tadd\t@CPI0_64[0], r0, r2\n.BB0_249:\n\tst.1\tr1, r2\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t64, r1, r1\n\tor\t@CPI0_60[0], r1, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_25:\n\tsub.s!\t68, r3, r2\n\tjump.lt\t@.BB0_2\n\tptr.add.s\t4, r1, r2\n\tld\tr2, r2\n\tadd\tr2, r0, stack-[4]\n\tsub.s!\t@CPI0_19[0], r2, r2\n\tjump.gt\t@.BB0_2\n\tptr.add.s\t36, r1, r2\n\tld\tr2, r4\n\tsub.s!\t@CPI0_20[0], r4, r2\n\tjump.gt\t@.BB0_2\n\tadd\t35, r4, r2\n\tsub!\tr2, r3, r2\n\tjump.ge\t@.BB0_2\n\tadd\t4, r4, r5\n\tptr.add\tr1, r5, r2\n\tld\tr2, r2\n\tsub.s!\t@CPI0_65[0], r2, r6\n\tjump.ge\t@.BB0_30\n\tadd\t31, r2, r6\n\tand\t@CPI0_75[0], r6, r6\n\tadd\t63, r6, r6\n\tand\t@CPI0_75[0], r6, r6\n\tsub.s!\t@CPI0_21[0], r6, r7\n\tjump.le\t@.BB0_32\n.BB0_30:\n\tadd\t@CPI0_57[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_42[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_96:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t@CPI0_30[0], r0, r1\n\tsload\tr1, r2\n\tand\t@CPI0_19[0], r2, r5\n\tcontext.caller\tr3\n\tsub!\tr5, r3, r4\n\tjump.ne\t@.BB0_98\n\tand\t@CPI0_31[0], r2, r2\n\tsstore\tr1, r2\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_32[0], r1, r1\n\tadd\t32781, r0, r2\n\tadd\t3, r0, r3\n\tadd\t@CPI0_33[0], r0, r4\n\tadd\tr0, r0, r6\n.BB0_100:\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r1\n\tjump.eq\t@.BB0_2\n.BB0_66:\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_98:\n\tadd\t@CPI0_61[0], r0, r1\n\tst.1\t0, r1\n\tst.1\t4, r3\n\tadd\t@CPI0_42[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_261:\n\tsub!\tr4, r0, r1\n\tjump.ne\t@.BB0_263\n.BB0_264:\n\tand\t@CPI0_27[0], r2, r1\n\tor\t1, r1, r1\n\tand\t@CPI0_28[0], r2, r2\n\tor\t@CPI0_29[0], r2, r2\n\tsub!\tr4, r0, r3\n\tadd.ne\tr1, r0, r2\n\tadd\t@CPI0_23[0], r0, r1\n\tsstore\tr1, r2\n\tand!\t@CPI0_24[0], r2, r1\n\tjump.ne\t@.BB0_266\n\tadd\t@CPI0_43[0], r0, r1\n\tst.1\t0, r1\n\tadd\t@CPI0_44[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_266:\n\tadd\tstack-[4], r0, r6\n\tsub!\tr6, r0, r1\n\tjump.ne\t@.BB0_268\n\tadd\t@CPI0_41[0], r0, r1\n\tst.1\t0, r1\n\tst.1\t4, r0\n\tadd\t@CPI0_42[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_32:\n\tadd\t36, r4, r4\n\tadd\t128, r6, r6\n\tst.1\t64, r6\n\tst.1\t128, r2\n\tadd\tr2, r4, r4\n\tsub!\tr4, r3, r3\n\tjump.gt\t@.BB0_2\n\tadd\tr8, r0, stack-[3]\n\tadd\t32, r5, r3\n\tptr.add\tr1, r3, r1\n\tand\t31, r2, r3\n\tshr.s!\t5, r2, r4\n\tjump.eq\t@.BB0_36\n\tadd\t160, r0, r5\n\tshl.s\t5, r4, r6\n\tadd\t160, r6, r6\n\tptr.add\tr1, r0, r7\n.BB0_35:\n\tld.inc\tr7, r8, r7\n\tst.1.inc\tr5, r8, r5\n\tsub!\tr5, r6, r8\n\tjump.ne\t@.BB0_35\n.BB0_36:\n\tsub!\tr3, r0, r5\n\tjump.eq\t@.BB0_38\n\tshl.s\t5, r4, r4\n\tptr.add\tr1, r4, r1\n\tshl.s\t3, r3, r3\n\tadd\t160, r4, r4\n\tld.1\tr4, r5\n\tshl\tr5, r3, r5\n\tshr\tr5, r3, r5\n\tld\tr1, r1\n\tsub\t256, r3, r3\n\tshr\tr1, r3, r1\n\tshl\tr1, r3, r1\n\tor\tr1, r5, r1\n\tst.1\tr4, r1\n.BB0_38:\n\tadd\t160, r2, r1\n\tst.1\tr1, r0\n\tadd\t@CPI0_62[0], r0, r1\n\tst.2\t0, r1\n\tcontext.code_source\tr1\n\tst.2\t4, r1\n\tst.2\t36, r0\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_63[0], r1, r1\n\tadd\t32773, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_39\n\tld\tr1, r1\n\tand\t@CPI0_19[0], r1, r1\n\tcontext.this\tr2\n\tsub!\tr2, r1, r2\n\tjump.eq\t@.BB0_42\n\tadd\t@CPI0_64[0], r0, r2\n\tsload\tr2, r2\n\tand\t@CPI0_19[0], r2, r2\n\tsub!\tr2, r1, r1\n\tjump.ne\t@.BB0_42\n\tadd\t@CPI0_30[0], r0, r1\n\tsload\tr1, r1\n\tand\t@CPI0_19[0], r1, r2\n\tcontext.caller\tr1\n\tsub!\tr2, r1, r2\n\tjump.ne\t@.BB0_45\n\tld.1\t64, r2\n\tadd\t@CPI0_66[0], r0, r1\n\tadd\tr2, r0, stack-[2]\n\tst.1.inc\tr2, r1, r1\n\tadd\tr1, r0, stack-[1]\n\tcontext.gas_left\tr1\n\tadd\tstack-[4], r0, r2\n\tsub.s!\t4, r2, r2\n\tjump.ne\t@.BB0_49\n\tcontext.sp\tr1\n\tsub.s\t6, r1, r1\n\tshl.s\t5, r1, r1\n\tadd\tstack[@returndatasize], r0, r3\n\tsub.s!\t32, r3, r2\n\tadd\t32, r0, r4\n\tadd.lt\tr3, r0, r4\n\tjump\t@.BB0_55\n.BB0_42:\n\tadd\t@CPI0_74[0], r0, r1\n\tst.1\t0, r1\n\tadd\t@CPI0_44[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_268:\n\tadd\tr4, r0, stack-[3]\n\tadd\t@CPI0_30[0], r0, r1\n\tsload\tr1, r2\n\tand\t@CPI0_31[0], r2, r3\n\tor\tr3, r6, r3\n\tsstore\tr1, r3\n\tcontext.gas_left\tr1\n\tand\t@CPI0_19[0], r2, r5\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_32[0], r1, r1\n\tadd\t32781, r0, r2\n\tadd\t3, r0, r3\n\tadd\t@CPI0_33[0], r0, r4\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r1\n\tjump.eq\t@.BB0_2\n\tld.1\t64, r1\n\tsub.s!\t@CPI0_34[0], r1, r2\n\tjump.gt\t@.BB0_30\n\tadd\t36, r1, r2\n\tadd\t@CPI0_35[0], r0, r3\n\tst.1\tr2, r3\n\tadd\t68, r1, r2\n\tcontext.gas_left\tr3\n\tadd\t96, r0, r4\n\tst.1\tr2, r4\n\tadd\t@CPI0_36[0], r0, r2\n\tst.1\tr1, r2\n\tadd\t100, r1, r2\n\tst.1\tr2, r0\n\tadd\t4, r1, r2\n\tst.1\tr2, r0\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t64, r1, r1\n\tsub.s!\t@CPI0_0[0], r3, r2\n\tadd.ge\t@CPI0_0[0], r0, r3\n\tshl.s\t192, r3, r2\n\tor\tr1, r2, r1\n\tor\t@CPI0_37[0], r1, r1\n\tadd\t32774, r0, r2\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_271\n\tld\tr1, r1\n\tsub!\tr1, r0, r2\n\tjump.ne\t@.BB0_280\n\tptr.add\tstack[@ptr_return_data], r0, r1\n\tadd\tstack[@returndatasize], r0, r2\n\tjump\t@.BB0_274\n.BB0_162:\n\tst.1.inc\tr5, r10, r5\n\tsub!\tr11, r9, r4\n\tadd\tr11, r0, r4\n\tjump.ge\t@.BB0_163\n.BB0_156:\n\tadd\t31, r4, r10\n\tsub!\tr10, r7, r11\n\tadd\tr0, r0, r11\n\tadd.ge\t@CPI0_52[0], r0, r11\n\tand\t@CPI0_52[0], r7, r12\n\tand\t@CPI0_52[0], r10, r10\n\txor\tr10, r12, r13\n\tsub!\tr10, r12, r10\n\tadd\tr0, r0, r10\n\tadd.lt\t@CPI0_52[0], r0, r10\n\tsub.s!\t@CPI0_52[0], r13, r12\n\tadd.ne\tr11, r0, r10\n\tsub!\tr10, r0, r10\n\tjump.ne\t@.BB0_2\n\tld.1\t64, r10\n\tsub.s!\t@CPI0_53[0], r10, r11\n\tjump.gt\t@.BB0_30\n\tadd\t64, r10, r11\n\tst.1\t64, r11\n\tadd\t64, r4, r11\n\tsub!\tr11, r7, r12\n\tjump.gt\t@.BB0_2\n\tsub.s!\t@CPI0_76[0], r4, r12\n\tjump.gt\t@.BB0_162\n\tadd\tr10, r0, r12\n.BB0_161:\n\tld.1.inc\tr4, r13, r4\n\tst.1.inc\tr12, r13, r12\n\tsub!\tr4, r11, r13\n\tjump.lt\t@.BB0_161\n\tjump\t@.BB0_162\n.BB0_303:\n\tadd\tr0, r0, r2\n\tjump\t@.BB0_304\n.BB0_317:\n\tadd\t1, r2, r2\n\tsub!\tr2, r4, r6\n\tjump.ge\t@.BB0_315\n.BB0_304:\n\tshl.s\t5, r2, r6\n\tadd\tr6, r1, r6\n\tmul\t31, r2, r7, r8\n\tsub!\tr2, r0, r8\n\tjump.eq\t@.BB0_306\n\tadd\tr0, r0, r8\n\tjump\t@.BB0_318\n.BB0_325:\n\tsub!\tr10, r2, r10\n\tjump.le\t@.BB0_196\n.BB0_322:\n\tst.1\tr6, r9\n\tsub.s!\t30, r8, r9\n\tadd\t1, r8, r8\n\tjump.ge\t@.BB0_317\n.BB0_318:\n\tadd\tr8, r7, r10\n\tsub!\tr10, r3, r9\n\tjump.ge\t@.BB0_317\n\tld.1\t128, r9\n\tsub!\tr10, r9, r9\n\tadd\tr0, r0, r9\n\tjump.ge\t@.BB0_320\n\tadd\t160, r10, r9\n\tld.1\tr9, r9\n\tshr.s\t248, r9, r9\n.BB0_320:\n\tld.1\tr5, r10\n\tsub!\tr8, r0, r11\n\tjump.eq\t@.BB0_325\n\tsub!\tr10, r2, r10\n\tjump.le\t@.BB0_196\n\tshl.s\t3, r8, r10\n\tshl\tr9, r10, r9\n\tld.1\tr6, r10\n\tadd\tr10, r9, r9\n\tsub!\tr9, r10, r10\n\tadd\t0, r0, r10\n\tadd.lt\t1, r0, r10\n\tand!\t1, r10, r10\n\tjump.eq\t@.BB0_322\n\tjump\t@.BB0_198\n.BB0_306:\n\tadd\tr0, r0, r8\n\tjump\t@.BB0_307\n.BB0_313:\n\tsub!\tr10, r0, r10\n\tjump.eq\t@.BB0_196\n.BB0_314:\n\tst.1\tr6, r9\n\tsub.s!\t30, r8, r9\n\tadd\t1, r8, r8\n\tjump.ge\t@.BB0_317\n.BB0_307:\n\tadd\tr8, r7, r10\n\tsub!\tr10, r3, r9\n\tjump.ge\t@.BB0_317\n\tld.1\t128, r9\n\tsub!\tr10, r9, r9\n\tadd\tr0, r0, r9\n\tjump.ge\t@.BB0_310\n\tadd\t160, r10, r9\n\tld.1\tr9, r9\n\tshr.s\t248, r9, r9\n.BB0_310:\n\tld.1\tr5, r10\n\tsub!\tr8, r0, r11\n\tjump.eq\t@.BB0_313\n\tsub!\tr10, r0, r10\n\tjump.eq\t@.BB0_196\n\tshl.s\t3, r8, r10\n\tshl\tr9, r10, r9\n\tld.1\tr6, r10\n\tadd\tr10, r9, r9\n\tsub!\tr9, r10, r10\n\tadd\t0, r0, r10\n\tadd.lt\t1, r0, r10\n\tand!\t1, r10, r10\n\tjump.eq\t@.BB0_314\n.BB0_198:\n\tadd\t@CPI0_57[0], r0, r1\n\tst.1\t0, r1\n\tadd\t17, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_42[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_271:\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tadd\tr1, r0, r2\n\tshr.s\t96, r2, r2\n\tand\t@CPI0_0[0], r2, stack[@returndatasize]\n\tand\t@CPI0_0[0], r2, r2\n.BB0_274:\n\tld.1\t64, r3\n\tand\t31, r2, r4\n\tshr.s!\t5, r2, r5\n\tshl.s\t5, r5, r5\n\tjump.eq\t@.BB0_277\n\tadd\tr3, r5, r6\n\tptr.add\tr1, r0, r7\n\tadd\tr3, r0, r8\n.BB0_276:\n\tld.inc\tr7, r9, r7\n\tst.1.inc\tr8, r9, r8\n\tsub!\tr8, r6, r9\n\tjump.ne\t@.BB0_276\n.BB0_277:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_279\n\tptr.add\tr1, r5, r1\n\tadd\tr3, r5, r5\n\tshl.s\t3, r4, r4\n\tld.1\tr5, r6\n\tshl\tr6, r4, r6\n\tshr\tr6, r4, r6\n\tld\tr1, r1\n\tsub\t256, r4, r4\n\tshr\tr1, r4, r1\n\tshl\tr1, r4, r1\n\tor\tr1, r6, r1\n\tst.1\tr5, r1\n.BB0_279:\n\tsub.s!\t@CPI0_0[0], r2, r1\n\tadd.ge\t@CPI0_0[0], r0, r2\n\tshl.s\t96, r2, r1\n\tsub.s!\t@CPI0_0[0], r3, r2\n\tadd.ge\t@CPI0_0[0], r0, r3\n\tshl.s\t64, r3, r2\n\tor\tr2, r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_280:\n\tand\t@CPI0_19[0], r1, r1\n\tsload\tr0, r2\n\tand\t@CPI0_31[0], r2, r2\n\tor\tr2, r1, r1\n\tsstore\tr0, r1\n\tsub!\tstack-[3], r0, r1\n\tjump.ne\t@.BB0_66\n\tadd\t@CPI0_23[0], r0, r1\n\tsload\tr1, r2\n\tand\t@CPI0_38[0], r2, r2\n\tsstore\tr1, r2\n\tadd\t1, r0, r3\n\tld.1\t64, r1\n\tst.1\tr1, r3\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t64, r1, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r4\n\tadd.ge\t@CPI0_0[0], r0, r2\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI0_39[0], r1, r1\n\tadd\t32781, r0, r2\n\tadd\t@CPI0_40[0], r0, r4\n\tjump\t@.BB0_100\n.BB0_45:\n\tadd\t@CPI0_61[0], r0, r2\n\tst.1\t0, r2\n\tst.1\t4, r1\n\tadd\t@CPI0_42[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_49:\n\tadd\tstack-[2], r0, r3\n\tsub.s!\t@CPI0_0[0], r3, r2\n\tadd\t@CPI0_0[0], r0, r2\n\tadd.lt\tr3, r0, r2\n\tshl.s\t64, r2, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\tr1, r2, r1\n\tor\t@CPI0_44[0], r1, r1\n\tadd\tstack-[4], r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tsub.s!\t32, r3, r4\n\tadd\t32, r0, r4\n\tadd.lt\tr3, r0, r4\n\tand\t31, r4, r5\n\tshr.s!\t5, r4, r6\n\tadd\tstack-[1], r0, r10\n\tjump.eq\t@.BB0_52\n\tptr.add\tr1, r0, r7\n\tadd\tstack-[2], r0, r8\n.BB0_51:\n\tld.inc\tr7, r9, r7\n\tst.1.inc\tr8, r9, r8\n\tsub!\tr8, r10, r9\n\tjump.ne\t@.BB0_51\n.BB0_52:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_54\n\tshl.s\t5, r6, r6\n\tptr.add\tr1, r6, r7\n\tadd\tstack-[2], r6, r6\n\tshl.s\t3, r5, r5\n\tld.1\tr6, r8\n\tshl\tr8, r5, r8\n\tshr\tr8, r5, r8\n\tld\tr7, r7\n\tsub\t256, r5, r5\n\tshr\tr7, r5, r7\n\tshl\tr7, r5, r5\n\tor\tr5, r8, r5\n\tst.1\tr6, r5\n.BB0_54:\n\tadd\tr3, r0, stack[@returndatasize]\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tcontext.sp\tr1\n\tsub.s\t5, r1, r1\n\tshl.s\t5, r1, r1\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_62\n.BB0_55:\n\tadd\t31, r4, r2\n\tand\t96, r2, r4\n\tadd\tstack-[2], r4, r2\n\tsub!\tr2, r4, r4\n\tadd\t0, r0, r4\n\tadd.lt\t1, r0, r4\n\tsub.s!\t@CPI0_20[0], r2, r5\n\tjump.gt\t@.BB0_30\n\tand!\t1, r4, r4\n\tjump.ne\t@.BB0_30\n\tst.1\t64, r2\n\tsub.s!\t32, r3, r2\n\tjump.ge\t@.BB0_58\n.BB0_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_58:\n\tadd\tstack-[2], r0, r2\n\tld.1\tr2, r2\n\tshr.s\t5, r1, r1\n\tadd\tr2, r0, stack[r1]\n\tsub.s!\t@CPI0_64[0], r2, r1\n\tjump.ne\t@.BB0_59\n\tadd\t@CPI0_25[0], r0, r1\n\tst.2\t0, r1\n\tadd\tstack-[4], r0, r1\n\tst.2\t4, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_26[0], r1, r1\n\tadd\t32770, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_39\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_64\n.BB0_62:\n\tadd\t@CPI0_73[0], r0, r1\n.BB0_63:\n\tst.1\t0, r1\n\tadd\tstack-[4], r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_42[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_59:\n\tadd\t@CPI0_67[0], r0, r1\n\tst.1\t0, r1\n\tst.1\t4, r2\n\tadd\t@CPI0_42[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_64:\n\tadd\t@CPI0_64[0], r0, r1\n\tsload\tr1, r2\n\tand\t@CPI0_31[0], r2, r2\n\tadd\tstack-[4], r0, r5\n\tor\tr2, r5, r2\n\tsstore\tr1, r2\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_32[0], r1, r1\n\tadd\t32781, r0, r2\n\tadd\t2, r0, r3\n\tadd\t@CPI0_68[0], r0, r4\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r1\n\tjump.eq\t@.BB0_2\n\tld.1\t128, r1\n\tsub!\tr1, r0, r2\n\tjump.ne\t@.BB0_69\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.eq\t@.BB0_66\n\tadd\t@CPI0_72[0], r0, r1\n\tst.1\t0, r1\n\tadd\t@CPI0_44[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_69:\n\tcontext.gas_left\tr2\n\tadd\tstack-[4], r0, r3\n\tsub.s!\t4, r3, r3\n\tjump.ne\t@.BB0_70\n\tadd\t1, r0, r2\n\tadd\tstack[@returndatasize], r0, r3\n\tjump\t@.BB0_72\n.BB0_70:\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t96, r1, r1\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\t@CPI0_0[0], r0, r2\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI0_69[0], r1, r1\n\tadd\tstack-[4], r0, r2\n\tnear_call\tr0, @__delegatecall, @DEFAULT_UNWIND\n\tand\t1, r2, r2\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tshr.s\t96, r1, r1\n\tand\t@CPI0_0[0], r1, stack[@returndatasize]\n\tand\t@CPI0_0[0], r1, r3\n.BB0_72:\n\tsub!\tr3, r0, r1\n\tjump.ne\t@.BB0_82\n\tadd\t96, r0, r1\n.BB0_74:\n\tld.1\tr1, r1\n\tsub!\tr2, r0, r2\n\tjump.ne\t@.BB0_75\n\tsub!\tr1, r0, r2\n\tjump.ne\t@.BB0_81\n\tadd\t@CPI0_71[0], r0, r1\n\tst.1\t0, r1\n\tadd\t@CPI0_44[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_82:\n\tsub.s!\t@CPI0_20[0], r3, r1\n\tjump.gt\t@.BB0_30\n\tadd\t31, r3, r1\n\tand\t@CPI0_75[0], r1, r1\n\tadd\t63, r1, r1\n\tand\t@CPI0_75[0], r1, r4\n\tld.1\t64, r1\n\tadd\tr1, r4, r4\n\tsub!\tr4, r1, r5\n\tadd\t0, r0, r5\n\tadd.lt\t1, r0, r5\n\tsub.s!\t@CPI0_20[0], r4, r6\n\tjump.gt\t@.BB0_30\n\tand!\t1, r5, r5\n\tjump.ne\t@.BB0_30\n\tst.1\t64, r4\n\tand\t31, r3, r4\n\tst.1.inc\tr1, r3, r5\n\tadd\tr5, r0, stack-[3]\n\tptr.add\tstack[@ptr_return_data], r0, r5\n\tshr.s!\t5, r3, r3\n\tjump.eq\t@.BB0_88\n\tshl.s\t5, r3, r6\n\tadd\tstack-[3], r0, r8\n\tadd\tr8, r6, r6\n\tptr.add\tr5, r0, r7\n.BB0_87:\n\tld.inc\tr7, r9, r7\n\tst.1.inc\tr8, r9, r8\n\tsub!\tr8, r6, r9\n\tjump.ne\t@.BB0_87\n.BB0_88:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_74\n\tshl.s\t5, r3, r3\n\tptr.add\tr5, r3, r5\n\tadd\tstack-[3], r3, r3\n\tshl.s\t3, r4, r4\n\tld.1\tr3, r6\n\tshl\tr6, r4, r6\n\tshr\tr6, r4, r6\n\tld\tr5, r5\n\tsub\t256, r4, r4\n\tshr\tr5, r4, r5\n\tshl\tr5, r4, r4\n\tor\tr4, r6, r4\n\tst.1\tr3, r4\n\tjump\t@.BB0_74\n.BB0_75:\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_66\n\tadd\t@CPI0_25[0], r0, r1\n\tst.2\t0, r1\n\tadd\tstack-[4], r0, r1\n\tst.2\t4, r1\n\tcontext.gas_left\tr1\n\tsub.s!\t@CPI0_0[0], r1, r2\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI0_26[0], r1, r1\n\tadd\t32770, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_39\n\tld\tr1, r1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_66\n\tadd\t@CPI0_70[0], r0, r1\n\tjump\t@.BB0_63\n.BB0_39:\n\trevert\n.BB0_81:\n\tadd\tstack-[3], r0, r3\n\tsub.s!\t@CPI0_0[0], r3, r2\n\tadd.ge\t@CPI0_0[0], r0, r3\n\tshl.s\t64, r3, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t96, r1, r1\n\tor\tr1, r2, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_163:\n\tadd\t255, r6, r4\n\tsub!\tr4, r7, r5\n\tadd\tr0, r0, r5\n\tadd.ge\t@CPI0_52[0], r0, r5\n\tand\t@CPI0_52[0], r7, r10\n\tand\t@CPI0_52[0], r4, r4\n\txor\tr4, r10, r11\n\tsub!\tr4, r10, r4\n\tadd\tr0, r0, r4\n\tadd.lt\t@CPI0_52[0], r0, r4\n\tsub.s!\t@CPI0_52[0], r11, r10\n\tadd.ne\tr5, r0, r4\n\tsub!\tr4, r0, r4\n\tjump.ne\t@.BB0_2\n\tld.1\t64, r4\n\tadd\tr4, r0, stack-[3]\n\tsub.s!\t@CPI0_53[0], r4, r4\n\tjump.gt\t@.BB0_30\n\tadd\tstack-[3], r0, r4\n\tadd\t64, r4, r4\n\tst.1\t64, r4\n\tadd\t288, r6, r6\n\tsub!\tr6, r7, r7\n\tjump.gt\t@.BB0_2\n\tsub.s!\t@CPI0_76[0], r9, r7\n\tjump.gt\t@.BB0_170\n\tadd\tstack-[3], r0, r4\n.BB0_168:\n\tld.1.inc\tr9, r7, r9\n\tst.1.inc\tr4, r7, r4\n\tsub!\tr9, r6, r7\n\tjump.lt\t@.BB0_168\n\tld.1\t64, r4\n.BB0_170:\n\tsub.s!\t@CPI0_54[0], r4, r6\n\tjump.gt\t@.BB0_30\n\tadd\t1088, r4, r6\n\tst.1\t64, r6\n\tptr.add\tr2, r0, r7\n\tadd\tr4, r0, r8\n.BB0_172:\n\tld.inc\tr7, r9, r7\n\tst.1.inc\tr8, r9, r8\n\tsub!\tr8, r6, r9\n\tjump.ne\t@.BB0_172\n\tld.1\t64, r6\n\tsub.s!\t@CPI0_55[0], r6, r7\n\tjump.gt\t@.BB0_30\n\tadd\t320, r6, r9\n\tld.1\t128, r8\n\tst.1\t64, r9\n\tadd\t9, r0, r7\n\tst.1.inc\tr6, r7, r7\n\tptr.add\tr2, r0, r10\n\tadd\tr7, r0, r11\n.BB0_175:\n\tld.inc\tr10, r12, r10\n\tst.1.inc\tr11, r12, r11\n\tsub!\tr11, r9, r12\n\tjump.ne\t@.BB0_175\n\tadd\t32, r8, r9\n\tadd\tr0, r0, r10\n\tjump\t@.BB0_177\n.BB0_188:\n\tsub.s!\t8, r10, r5\n\tadd\t1, r10, r10\n\tjump.ge\t@.BB0_189\n.BB0_177:\n\tshl.s\t5, r10, r11\n\tadd\tr11, r7, r11\n\tmul\t31, r10, r12, r13\n\tsub!\tr10, r0, r13\n\tjump.eq\t@.BB0_179\n\tadd\tr0, r0, r13\n\tjump\t@.BB0_190\n.BB0_199:\n\tsub!\tr15, r10, r5\n\tjump.le\t@.BB0_196\n.BB0_194:\n\tst.1\tr11, r14\n\tsub.s!\t30, r13, r5\n\tadd\t1, r13, r13\n\tjump.ge\t@.BB0_188\n.BB0_190:\n\tadd\tr13, r12, r15\n\tsub.s!\t254, r15, r5\n\tjump.gt\t@.BB0_188\n\tld.1\tr8, r5\n\tsub!\tr15, r5, r5\n\tadd\tr0, r0, r14\n\tjump.ge\t@.BB0_192\n\tadd\tr15, r9, r5\n\tld.1\tr5, r5\n\tshr.s\t248, r5, r14\n.BB0_192:\n\tld.1\tr6, r15\n\tsub!\tr13, r0, r5\n\tjump.eq\t@.BB0_199\n\tsub!\tr15, r10, r5\n\tjump.le\t@.BB0_196\n\tshl.s\t3, r13, r5\n\tshl\tr14, r5, r5\n\tld.1\tr11, r15\n\tadd\tr15, r5, r14\n\tsub!\tr14, r15, r5\n\tadd\t0, r0, r5\n\tadd.lt\t1, r0, r5\n\tsub.s!\t1, r5, r5\n\tjump.ne\t@.BB0_194\n\tjump\t@.BB0_198\n.BB0_179:\n\tadd\tr0, r0, r13\n\tjump\t@.BB0_180\n.BB0_186:\n\tsub!\tr15, r0, r5\n\tjump.eq\t@.BB0_196\n.BB0_187:\n\tst.1\tr11, r14\n\tsub.s!\t30, r13, r5\n\tadd\t1, r13, r13\n\tjump.ge\t@.BB0_188\n.BB0_180:\n\tadd\tr13, r12, r15\n\tsub.s!\t254, r15, r14\n\tjump.gt\t@.BB0_188\n\tld.1\tr8, r14\n\tsub!\tr15, r14, r14\n\tadd\tr0, r0, r14\n\tjump.ge\t@.BB0_183\n\tadd\tr15, r9, r14\n\tld.1\tr14, r14\n\tshr.s\t248, r14, r14\n.BB0_183:\n\tld.1\tr6, r15\n\tsub!\tr13, r0, r5\n\tjump.eq\t@.BB0_186\n\tsub!\tr15, r0, r5\n\tjump.eq\t@.BB0_196\n\tshl.s\t3, r13, r5\n\tshl\tr14, r5, r5\n\tld.1\tr11, r15\n\tadd\tr15, r5, r14\n\tsub!\tr14, r15, r5\n\tadd\t0, r0, r5\n\tadd.lt\t1, r0, r5\n\tand!\t1, r5, r5\n\tjump.eq\t@.BB0_187\n\tjump\t@.BB0_198\n.BB0_189:\n\tadd\tr0, r0, r8\n.BB0_200:\n\tld.1\tr6, r5\n\tsub!\tr5, r8, r5\n\tjump.le\t@.BB0_196\n\tshl.s\t5, r8, r5\n\tadd\tr5, r4, r9\n\tadd\tr5, r7, r5\n\tld.1\tr5, r5\n\tst.1\tr9, r5\n\tsub.s!\t8, r8, r5\n\tadd\t1, r8, r8\n\tjump.lt\t@.BB0_200\n\tadd\t288, r4, r5\n\tld.1\t160, r6\n\tst.1\tr5, r6\n\tadd\t320, r4, r5\n\tld.1\t256, r6\n\tst.1\tr5, r6\n\tadd\t352, r4, r5\n\tld.1\t192, r6\n\tst.1\tr5, r6\n\tld.1\t64, r6\n\tsub.s!\t@CPI0_56[0], r6, r5\n\tjump.gt\t@.BB0_30\n\tadd\t672, r6, r9\n\tld.1\t224, r8\n\tst.1\t64, r9\n\tadd\t20, r0, r5\n\tst.1.inc\tr6, r5, r7\n\tadd\tr7, r0, r10\n.BB0_204:\n\tld.inc\tr2, r5, r2\n\tst.1.inc\tr10, r5, r10\n\tsub!\tr10, r9, r5\n\tjump.ne\t@.BB0_204\n\tadd\t32, r8, r2\n\tadd\tr0, r0, r9\n\tjump\t@.BB0_206\n.BB0_217:\n\tsub.s!\t19, r9, r5\n\tadd\t1, r9, r9\n\tjump.ge\t@.BB0_216\n.BB0_206:\n\tshl.s\t5, r9, r5\n\tadd\tr5, r7, r10\n\tmul\t31, r9, r11, r5\n\tadd\tr0, r0, r12\n\tsub!\tr9, r0, r5\n\tjump.ne\t@.BB0_218\n\tjump\t@.BB0_208\n.BB0_225:\n\tsub!\tr14, r9, r5\n\tjump.le\t@.BB0_196\n.BB0_222:\n\tst.1\tr10, r13\n\tsub.s!\t30, r12, r5\n\tadd\t1, r12, r12\n\tjump.ge\t@.BB0_217\n.BB0_218:\n\tadd\tr12, r11, r14\n\tsub.s!\t604, r14, r5\n\tjump.gt\t@.BB0_217\n\tld.1\tr8, r5\n\tsub!\tr14, r5, r5\n\tadd\tr0, r0, r13\n\tjump.ge\t@.BB0_220\n\tadd\tr14, r2, r5\n\tld.1\tr5, r5\n\tshr.s\t248, r5, r13\n.BB0_220:\n\tld.1\tr6, r14\n\tsub!\tr12, r0, r5\n\tjump.eq\t@.BB0_225\n\tsub!\tr14, r9, r5\n\tjump.le\t@.BB0_196\n\tshl.s\t3, r12, r5\n\tshl\tr13, r5, r5\n\tld.1\tr10, r14\n\tadd\tr14, r5, r13\n\tsub!\tr13, r14, r5\n\tadd\t0, r0, r5\n\tadd.lt\t1, r0, r5\n\tand!\t1, r5, r5\n\tjump.eq\t@.BB0_222\n\tjump\t@.BB0_198\n.BB0_214:\n\tsub!\tr14, r0, r5\n\tjump.eq\t@.BB0_196\n.BB0_215:\n\tst.1\tr10, r13\n\tsub.s!\t30, r12, r5\n\tadd\t1, r12, r12\n\tjump.ge\t@.BB0_217\n.BB0_208:\n\tadd\tr12, r11, r14\n\tsub.s!\t604, r14, r5\n\tjump.gt\t@.BB0_217\n\tld.1\tr8, r5\n\tsub!\tr14, r5, r5\n\tadd\tr0, r0, r13\n\tjump.ge\t@.BB0_211\n\tadd\tr14, r2, r5\n\tld.1\tr5, r5\n\tshr.s\t248, r5, r13\n.BB0_211:\n\tld.1\tr6, r14\n\tsub!\tr12, r0, r5\n\tjump.eq\t@.BB0_214\n\tsub!\tr14, r0, r5\n\tjump.eq\t@.BB0_196\n\tshl.s\t3, r12, r5\n\tshl\tr13, r5, r5\n\tld.1\tr10, r14\n\tadd\tr14, r5, r13\n\tsub!\tr13, r14, r5\n\tadd\t0, r0, r5\n\tadd.lt\t1, r0, r5\n\tand!\t1, r5, r5\n\tjump.eq\t@.BB0_215\n\tjump\t@.BB0_198\n.BB0_216:\n\tadd\t384, r4, r2\n\tadd\tr0, r0, r8\n.BB0_226:\n\tld.1\tr6, r5\n\tsub!\tr5, r8, r5\n\tjump.le\t@.BB0_196\n\tshl.s\t5, r8, r5\n\tadd\tr2, r5, r9\n\tadd\tr5, r7, r5\n\tld.1\tr5, r5\n\tst.1\tr9, r5\n\tsub.s!\t19, r8, r5\n\tadd\t1, r8, r8\n\tjump.lt\t@.BB0_226\n\tadd\t1024, r4, r2\n\tld.1\t288, r5\n\tst.1\tr2, r5\n\tadd\t1056, r4, r2\n\tld.1\t320, r5\n\tsub!\tr5, r0, r5\n\tadd\t0, r0, r5\n\tadd.ne\t1, r0, r5\n\tst.1\tr2, r5\n\tsload\tr0, r2\n\tld.1\t64, r7\n\tadd\t@CPI0_58[0], r0, r5\n\tst.1.inc\tr7, r5, r5\n\tadd\tr5, r0, stack-[4]\n\tadd\t4, r7, r5\n\tld.1.inc\tr1, r1, r6\n\tst.1\tr5, r1\n\tld.1\tr6, r1\n\tadd\t36, r7, r5\n\tst.1\tr5, r1\n\tadd\t1, r0, r6\n\tadd\tr7, r0, stack-[2]\n\tadd\t68, r7, r1\n.BB0_229:\n\tld.1.inc\tr3, r5, r3\n\tld.1.inc\tr5, r5, r7\n\tst.1.inc\tr1, r5, r5\n\tld.1\tr7, r7\n\tst.1\tr5, r7\n\tadd\t64, r1, r1\n\tand!\t1, r6, r5\n\tadd\tr0, r0, r6\n\tjump.ne\t@.BB0_229\n\tadd\tstack-[3], r0, r1\n\tld.1.inc\tr1, r1, r3\n\tadd\tstack-[2], r0, r6\n\tadd\t196, r6, r5\n\tst.1\tr5, r1\n\tld.1\tr3, r1\n\tadd\t228, r6, r3\n\tst.1\tr3, r1\n\tadd\t260, r6, r1\n\tadd\tr0, r0, r3\n.BB0_231:\n\tld.1.inc\tr4, r5, r4\n\tst.1.inc\tr1, r5, r1\n\tsub.s!\t33, r3, r5\n\tadd\t1, r3, r3\n\tjump.lt\t@.BB0_231\n\tcontext.gas_left\tr1\n\tand\t@CPI0_19[0], r2, r2\n\tsub.s!\t4, r2, r3\n\tjump.ne\t@.BB0_234\n\tadd\tstack[@returndatasize], r0, r3\n\tsub.s!\t32, r3, r1\n\tadd\t32, r0, r4\n\tadd.lt\tr3, r0, r4\n\tjump\t@.BB0_246\n.BB0_196:\n\tadd\t@CPI0_57[0], r0, r1\n\tst.1\t0, r1\n\tadd\t50, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_42[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_234:\n\tadd\tstack-[2], r0, r4\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd\t@CPI0_0[0], r0, r3\n\tadd.lt\tr4, r0, r3\n\tshl.s\t64, r3, r3\n\tsub.s!\t@CPI0_0[0], r1, r4\n\tadd.ge\t@CPI0_0[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\tr1, r3, r1\n\tor\t@CPI0_59[0], r1, r1\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tadd\tr1, r0, r3\n\tshr.s\t96, r3, r3\n\tand\t@CPI0_0[0], r3, r3\n\tsub.s!\t32, r3, r4\n\tadd\t32, r0, r4\n\tadd.lt\tr3, r0, r4\n\tand\t31, r4, r5\n\tshr.s!\t5, r4, r6\n\tjump.eq\t@.BB0_237\n\tptr.add\tr1, r0, r7\n\tadd\tstack-[2], r0, r8\n.BB0_236:\n\tld.inc\tr7, r9, r7\n\tst.1.inc\tr8, r9, r8\n\tsub.s!\tstack-[4], r8, r9\n\tjump.ne\t@.BB0_236\n.BB0_237:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_239\n\tshl.s\t5, r6, r6\n\tptr.add\tr1, r6, r7\n\tadd\tstack-[2], r6, r6\n\tshl.s\t3, r5, r5\n\tld.1\tr6, r8\n\tshl\tr8, r5, r8\n\tshr\tr8, r5, r8\n\tld\tr7, r7\n\tsub\t256, r5, r5\n\tshr\tr7, r5, r7\n\tshl\tr7, r5, r5\n\tor\tr5, r8, r5\n\tst.1\tr6, r5\n.BB0_239:\n\tadd\tr3, r0, stack[@returndatasize]\n\tptr.add\tr1, r0, stack[@ptr_return_data]\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_240\n.BB0_246:\n\tadd\t31, r4, r1\n\tand\t96, r1, r2\n\tadd\tstack-[2], r2, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI0_20[0], r1, r4\n\tjump.gt\t@.BB0_30\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB0_30\n\tst.1\t64, r1\n\tsub.s!\t32, r3, r2\n\tjump.lt\t@.BB0_2\n\tadd\tstack-[2], r0, r2\n\tld.1\tr2, r2\n\tsub!\tr2, r0, r3\n\tadd\t0, r0, r3\n\tadd.ne\t1, r0, r3\n\tsub!\tr2, r3, r3\n\tjump.eq\t@.BB0_249\n\tjump\t@.BB0_2\n.BB0_240:\n\tld.1\t64, r2\n\tand\t31, r3, r4\n\tshr.s!\t5, r3, r5\n\tjump.eq\t@.BB0_243\n\tshl.s\t5, r5, r6\n\tadd\tr2, r6, r6\n\tptr.add\tr1, r0, r7\n\tadd\tr2, r0, r8\n.BB0_242:\n\tld.inc\tr7, r9, r7\n\tst.1.inc\tr8, r9, r8\n\tsub!\tr8, r6, r9\n\tjump.ne\t@.BB0_242\n.BB0_243:\n\tsub!\tr4, r0, r6\n\tjump.eq\t@.BB0_245\n\tshl.s\t5, r5, r5\n\tptr.add\tr1, r5, r1\n\tadd\tr2, r5, r5\n\tshl.s\t3, r4, r4\n\tld.1\tr5, r6\n\tshl\tr6, r4, r6\n\tshr\tr6, r4, r6\n\tld\tr1, r1\n\tsub\t256, r4, r4\n\tshr\tr1, r4, r1\n\tshl\tr1, r4, r1\n\tor\tr1, r6, r1\n\tst.1\tr5, r1\n.BB0_245:\n\tshl.s\t96, r3, r1\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\t@CPI0_0[0], r0, r2\n\tshl.s\t64, r2, r2\n\tor\tr2, r1, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end0:\n\nfun_transferOwnership_inner:\n.func_begin1:\n\tand!\t@CPI1_0[0], r1, r6\n\tjump.eq\t@.BB1_1\n\tadd\t@CPI1_1[0], r0, r1\n\tsload\tr1, r2\n\tand\t@CPI1_2[0], r2, r3\n\tor\tr3, r6, r3\n\tsstore\tr1, r3\n\tcontext.gas_left\tr1\n\tand\t@CPI1_0[0], r2, r5\n\tsub.s!\t@CPI1_3[0], r1, r2\n\tadd.ge\t@CPI1_3[0], r0, r1\n\tshl.s\t192, r1, r1\n\tor\t@CPI1_4[0], r1, r1\n\tadd\t32781, r0, r2\n\tadd\t3, r0, r3\n\tadd\t@CPI1_5[0], r0, r4\n\tnear_call\tr0, @__farcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r1\n\tjump.eq\t@.BB1_3\n\tret\n.BB1_1:\n\tadd\t@CPI1_6[0], r0, r1\n\tst.1\t0, r1\n\tst.1\t4, r0\n\tadd\t@CPI1_7[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB1_3:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end1:\n\nfun_checkOwner:\n.func_begin2:\n\tadd\t@CPI2_0[0], r0, r1\n\tsload\tr1, r1\n\tand\t@CPI2_1[0], r1, r2\n\tcontext.caller\tr1\n\tsub!\tr2, r1, r2\n\tjump.ne\t@.BB2_1\n\tret\n.BB2_1:\n\tadd\t@CPI2_2[0], r0, r2\n\tst.1\t0, r2\n\tst.1\t4, r1\n\tadd\t@CPI2_3[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end2:\n\n__cxa_throw:\n.func_begin3:\n\trevert\n.func_end3:\n\n__farcall:\n.func_begin4:\n.tmp0:\n\tfar_call\tr1, r2, @.BB4_2\n.tmp1:\n\tadd\t1, r0, r2\n\tret\n.BB4_2:\n.tmp2:\n\tadd\tr0, r0, r2\n\tret\n.func_end4:\n\n__staticcall:\n.func_begin5:\n.tmp3:\n\tfar_call.static\tr1, r2, @.BB5_2\n.tmp4:\n\tadd\t1, r0, r2\n\tret\n.BB5_2:\n.tmp5:\n\tadd\tr0, r0, r2\n\tret\n.func_end5:\n\n__delegatecall:\n.func_begin6:\n.tmp6:\n\tfar_call.delegate\tr1, r2, @.BB6_2\n.tmp7:\n\tadd\t1, r0, r2\n\tret\n.BB6_2:\n.tmp8:\n\tadd\tr0, r0, r2\n\tret\n.func_end6:\n\n\t.data\n\t.p2align\t5, 0x0\nreturndatasize:\n\t.cell\t0\n\n\t.p2align\t5, 0x0\nptr_return_data:\n\t.cell\t0\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\nCPI1_3:\n\t.cell\t4294967295\nCPI0_1:\n\t.cell\t53919893334301279589334030174039261357415493651629346657050491355136\nCPI0_2:\n\t.cell\t2376452954\nCPI0_3:\n\t.cell\t3000958327\nCPI0_4:\n\t.cell\t3869409284\nCPI0_5:\n\t.cell\t3869409285\nCPI0_6:\n\t.cell\t4076725131\nCPI0_7:\n\t.cell\t3000958328\nCPI0_8:\n\t.cell\t3302387176\nCPI0_9:\n\t.cell\t2376452955\nCPI0_10:\n\t.cell\t2664268560\nCPI0_11:\n\t.cell\t2906436044\nCPI0_12:\n\t.cell\t1389465644\nCPI0_13:\n\t.cell\t1389465645\nCPI0_14:\n\t.cell\t1901074598\nCPI0_15:\n\t.cell\t2260897966\nCPI0_16:\n\t.cell\t1203402152\nCPI0_17:\n\t.cell\t1327428230\nCPI0_18:\n\t.cell\t1349128081\nCPI0_19:\nCPI1_0:\nCPI2_1:\n\t.cell\t1461501637330902918203684832716283019655932542975\nCPI0_20:\n\t.cell\t18446744073709551615\nCPI0_21:\n\t.cell\t18446744073709551487\nCPI0_22:\n\t.cell\t57896044618658097711785492504343953926634992332820282019728792003956564819936\nCPI0_23:\n\t.cell\t-6888066478505441749850992418581994297142195019068002000074442631546382030336\nCPI0_24:\n\t.cell\t4703919738795935662080\nCPI0_25:\n\t.cell\t10867283408178898638301172343726954674910073630256871736220740970449699113859\nCPI0_26:\n\t.cell\t904625751086426111047927909714404454142933105326819602152923490636624035840\nCPI0_27:\n\t.cell\t-18446744073709551616\nCPI0_28:\n\t.cell\t-4722366482869645213696\nCPI0_29:\n\t.cell\t18446744073709551617\nCPI0_30:\nCPI1_1:\nCPI2_0:\n\t.cell\t-50618728597856113392845064616540981989246464065957701405731832765476386532608\nCPI0_31:\nCPI1_2:\n\t.cell\t-1461501637330902918203684832716283019655932542976\nCPI0_32:\nCPI1_4:\n\t.cell\t904625697166532776746648320380374280103671755200316906558262375061821325312\nCPI0_33:\nCPI1_5:\n\t.cell\t-52524777015005588113349992707137368332388074750292320778649315033004770043936\nCPI0_34:\n\t.cell\t18446744073709551483\nCPI0_35:\n\t.cell\t452346369345739057840187608656707600911248332700236977416041655927011348226\nCPI0_36:\n\t.cell\t-45094662312588414058508742492242807367897819822786606328124609013070528553987\nCPI0_37:\n\t.cell\t904625697166532776746648320380374280103671765658434358441154937409622769664\nCPI0_38:\n\t.cell\t-4703919738795935662081\nCPI0_39:\n\t.cell\t904625697166532776746648320380374280103671757735618107014721178055227736064\nCPI0_40:\n\t.cell\t-25348915505135587074439314982920197891794094844330221606241752126453613231662\nCPI0_41:\nCPI1_6:\n\t.cell\t13710277464781854216000659759875001615964737203828340066645871065499466465280\nCPI0_42:\nCPI1_7:\nCPI2_3:\n\t.cell\t2852213850513516153367582212096\nCPI0_43:\n\t.cell\t-18137147752634923448151425331104951821831481814826519401342063394220618547200\nCPI0_44:\n\t.cell\t316912650057057350374175801344\nCPI0_45:\n\t.cell\t-3083309213719616880195627274211537752412234381985879761842777415326860574720\nCPI0_46:\n\t.cell\t2535301202817642044428229017600\nCPI0_47:\n\t.cell\t24054188468930106899028984559578241303416275163910948690514886096533466382336\nCPI0_48:\n\t.cell\t105312291668557186697918027683670432318895095400549111254310977535\nCPI0_49:\n\t.cell\t7605903604911151271132453142528\nCPI0_50:\n\t.cell\t57896044618658097711785492504343953926634992332820282019728792003956564819967\nCPI0_51:\n\t.cell\t18446744073709551231\nCPI0_52:\n\t.cell\t-57896044618658097711785492504343953926634992332820282019728792003956564819968\nCPI0_53:\n\t.cell\t18446744073709551551\nCPI0_54:\n\t.cell\t18446744073709550527\nCPI0_55:\n\t.cell\t18446744073709551295\nCPI0_56:\n\t.cell\t18446744073709550943\nCPI0_57:\n\t.cell\t35408467139433450592217433187231851964531694900788300625387963629091585785856\nCPI0_58:\n\t.cell\t-55567960562612944968767021481048954731495799621068523314037877705828336664576\nCPI0_59:\n\t.cell\t106799563069228327076097245052928\nCPI0_60:\n\t.cell\t2535301200456458802993406410752\nCPI0_61:\nCPI2_2:\n\t.cell\t7938186097999196165550678859506685896924014503924332068426884830790147899392\nCPI0_62:\n\t.cell\t22182216476136578060272566318850604970565072242024486780356928325126096266030\nCPI0_63:\n\t.cell\t904625751086426111047927909714404454142933107862120802609382293630030446592\nCPI0_64:\n\t.cell\t24440054405305269366569402256811496959409073762505157381672968839269610695612\nCPI0_65:\n\t.cell\t18446744073709551616\nCPI0_66:\n\t.cell\t37459919685038064034459671678110462261607019371023489081125878126755520184320\nCPI0_67:\n\t.cell\t-38847158164367767130686553086266128913421429033157580297347341782560412794880\nCPI0_68:\n\t.cell\t-30536698362301869620703524882028299911890425965968411027149867401609008632517\nCPI0_69:\n\t.cell\t2951479051793528258560\nCPI0_70:\n\t.cell\t-46321960365604724831933507365171173232996739913398926471486875190478029979648\nCPI0_71:\n\t.cell\t9113247101063757011529551392225999353373832475738586725164814963572685668352\nCPI0_72:\n\t.cell\t-34558482136735312034565669114340883502620987797126345908537763260651819499520\nCPI0_73:\n\t.cell\t34652376998830117593913104839803261469428120256412526777508616783661717520384\nCPI0_74:\n\t.cell\t-14253943957847027211565014127352479339456039177118555137074359430841794297856\nCPI0_75:\n\t.cell\t-32\nCPI0_76:\n\t.cell\t-65\n","methodIdentifiers":{"DOMAIN_BYTES()":"86c290ae","DOMAIN_FIELDS()":"b2defd78","SUBJECT_BYTES()":"506a0f91","SUBJECT_FIELDS()":"47ba75a8","UPGRADE_INTERFACE_VERSION()":"ad3cb1cc","_packBytes2Fields(bytes,uint256)":"e6a28005","initialize(address)":"c4d66de8","owner()":"8da5cb5b","proxiableUUID()":"52d1902d","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b","upgradeToAndCall(address,bytes)":"4f1ef286","verifyEmailProof((string,bytes32,uint256,string,bytes32,bytes32,bool,bytes))":"9ecd8310"},"metadata":{"llvm_options":[],"optimizer_settings":{"is_debug_logging_enabled":false,"is_fallback_to_size_enabled":false,"is_verify_each_enabled":false,"level_back_end":"Aggressive","level_middle_end":"Aggressive","level_middle_end_size":"Zero"},"solc_metadata":"{\"compiler\":{\"version\":\"0.8.26+commit.905b735b\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_BYTES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_FIELDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUBJECT_BYTES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUBJECT_FIELDS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_bytes\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_paddedSize\",\"type\":\"uint256\"}],\"name\":\"_packBytes2Fields\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_initialOwner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"domainName\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"publicKeyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"maskedSubject\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"emailNullifier\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"accountSalt\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"isCodeExist\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"}],\"internalType\":\"struct EmailProof\",\"name\":\"proof\",\"type\":\"tuple\"}],\"name\":\"verifyEmailProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"ERC1967InvalidImplementation(address)\":[{\"details\":\"The `implementation` of the proxy is invalid.\"}],\"ERC1967NonPayable()\":[{\"details\":\"An upgrade function sees `msg.value > 0` that may be lost.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"UUPSUnauthorizedCallContext()\":[{\"details\":\"The call is from an unauthorized context.\"}],\"UUPSUnsupportedProxiableUUID(bytes32)\":[{\"details\":\"The storage `slot` is unsupported as a UUID.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"initialize(address)\":{\"params\":{\"_initialOwner\":\"The address of the initial owner\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeToAndCall(address,bytes)\":{\"custom:oz-upgrades-unsafe-allow-reachable\":\"delegatecall\",\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"initialize(address)\":{\"notice\":\"Initialize the contract with the initial owner and deploy Groth16Verifier\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"node_modules/ether-email-auth/packages/contracts/src/utils/Verifier.sol\":\"Verifier\"},\"evmVersion\":\"cancun\",\"libraries\":{\"node_modules/ether-email-auth/packages/contracts/src/libraries/DecimalUtils.sol:DecimalUtils\":\"0x91cc0f0a227b8dd56794f9391e8af48b40420a0b\",\"node_modules/ether-email-auth/packages/contracts/src/libraries/SubjectUtils.sol:SubjectUtils\":\"0x981e3df952358a57753c7b85de7949da4abcf54a\"},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIfxa[r]EscLMVcul [j]Trpeulxa[r]cLgvifMCTUca[r]LSsTFOtfDnca[r]IulcscCTUtgvifMx[scCTUt] TOntnfDIulgvifMjmul[jul] VcTOcul jmul:fDnTOcmuO\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[\":@matterlabs/=node_modules/@matterlabs/\",\":@openzeppelin/=node_modules/@openzeppelin/\",\":@openzeppelin/contracts-upgradeable/=node_modules/@openzeppelin/contracts-upgradeable/\",\":@uniswap/=node_modules/@uniswap/\",\":@zk-email/=node_modules/@zk-email/\",\":accountabstraction/=node_modules/accountabstraction/\",\":ds-test/=node_modules/ds-test/src/\",\":email-recovery/=node_modules/email-recovery/\",\":ether-email-auth/=node_modules/ether-email-auth/\",\":forge-std/=node_modules/forge-std/src/\",\":solady/=node_modules/solady/src/\"]},\"sources\":{\"node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9706d43a0124053d9880f6e31a59f31bc0a6a3dc1acd66ce0a16e1111658c5f6\",\"dweb:/ipfs/QmUFmfowzkRwGtDu36cXV9SPTBHJ3n7dG9xQiK5B28jTf2\"]},\"node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7a61054ae84cd6c4d04c0c4450ba1d6de41e27e0a2c4f1bcdf58f796b401c609\",\"dweb:/ipfs/QmUvtdp7X1mRVyC3CsHrtPbgoqWaXHp3S1ZR24tpAQYJWM\"]},\"node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://08e39f23d5b4692f9a40803e53a8156b72b4c1f9902a88cd65ba964db103dab9\",\"dweb:/ipfs/QmPKn6EYDgpga7KtpkA8wV2yJCYGMtc9K4LkJfhKX2RVSV\"]},\"node_modules/@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"keccak256\":\"0x2a1f9944df2015c081d89cd41ba22ffaf10aa6285969f0dc612b235cc448999c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ef381843676aec64421200ee85eaa0b1356a35f28b9fc67e746a6bbb832077d9\",\"dweb:/ipfs/QmY8aorMYA2TeTCnu6ejDjzb4rW4t7TCtW4GZ6LoxTFm7v\"]},\"node_modules/@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\":{\"keccak256\":\"0x06a78f9b3ee3e6d0eb4e4cd635ba49960bea34cac1db8c0a27c75f2319f1fd65\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://547d21aa17f4f3f1a1a7edf7167beff8dd9496a0348d5588f15cc8a4b29d052a\",\"dweb:/ipfs/QmT16JtRQSWNpLo9W23jr6CzaMuTAcQcjJJcdRd8HLJ6cE\"]},\"node_modules/@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"keccak256\":\"0xc59a78b07b44b2cf2e8ab4175fca91e8eca1eee2df7357b8d2a8833e5ea1f64c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5aa4f07e65444784c29cd7bfcc2341b34381e4e5b5da9f0c5bd00d7f430e66fa\",\"dweb:/ipfs/QmWRMh4Q9DpaU9GvsiXmDdoNYMyyece9if7hnfLz7uqzWM\"]},\"node_modules/@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":{\"keccak256\":\"0x3ffb56bcb175984a10b1167e2eba560876bfe96a435f5d62ffed8b1bb4ebc4c7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7db94af56aa20efb57c3f9003eacd884faad04118967d8e35cdffe07790bbdcd\",\"dweb:/ipfs/QmXtAshRWFjcQ1kL7gpC5CiLUZgJ9uzrZyeHp2Sux9ojPF\"]},\"node_modules/@openzeppelin/contracts/utils/Address.sol\":{\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b7bd24e224f67f65bfadf85dc2929fa965456bb2415478bd0125471b5ce35245\",\"dweb:/ipfs/QmRaydGr8BTHs1kvaZfsNU69pKzUAGFrvABn1KiRSbE51y\"]},\"node_modules/@openzeppelin/contracts/utils/StorageSlot.sol\":{\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1ae50c8b562427df610cc4540c9bf104acca7ef8e2dcae567ae7e52272281e9c\",\"dweb:/ipfs/QmTHiadFCSJUPpRjNegc5SahmeU8bAoY8i9Aq6tVscbcKR\"]},\"node_modules/ether-email-auth/packages/contracts/src/utils/Groth16Verifier.sol\":{\"keccak256\":\"0xe4e63bdc429241908d6f8ad95ace58a57a6a2d551bd8dfb61724bd32c449c61e\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://acc34dbfbc1d3b711d7ddeed55bc4ed12afce92e72cc97e2c4f8b7f095d103e1\",\"dweb:/ipfs/QmSr2Ht1M7z9o61sDcbgP8w1tvdUZq9Xnp8RT5Xqwqhd69\"]},\"node_modules/ether-email-auth/packages/contracts/src/utils/Verifier.sol\":{\"keccak256\":\"0x9bdf21b81bcbb448d536c28c4c93fa59cc3e9a876525e01898f01681de9b4bc9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8fa1304418c808e23bc4fffd5be272f08ab26113cb65f8c20bbd540262c7ca56\",\"dweb:/ipfs/QmXrUfivWzm3hdK2qKkPKru3E55NFswrwMWkfLXyEVFc6W\"]}},\"version\":1}","solc_version":"0.8.26","solc_zkvm_edition":"1.0.1","zk_version":"1.5.0"},"storageLayout":{"storage":[],"types":{}},"userdoc":{},"devdoc":{},"irOptimized":"/// @use-src 4:\"node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\", 5:\"node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\", 6:\"node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\", 8:\"node_modules/@openzeppelin/contracts/interfaces/draft-IERC1822.sol\", 14:\"node_modules/@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\", 41:\"node_modules/ether-email-auth/packages/contracts/src/utils/Verifier.sol\"\nobject \"Verifier_9789\" {\n    code {\n        {\n            /// @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\"\n            let _1 := memoryguard(0xa0)\n            mstore(64, _1)\n            if callvalue() { revert(0, 0) }\n            /// @src 14:1052:1065  \"address(this)\"\n            mstore(128, /** @src 14:1060:1064  \"this\" */ address())\n            /// @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\"\n            let _2 := datasize(\"Verifier_9789_deployed\")\n            codecopy(_1, dataoffset(\"Verifier_9789_deployed\"), _2)\n            setimmutable(_1, \"1676\", mload(/** @src 14:1052:1065  \"address(this)\" */ 128))\n            /// @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\"\n            return(_1, _2)\n        }\n    }\n    /// @use-src 4:\"node_modules/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\", 5:\"node_modules/@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\", 6:\"node_modules/@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\", 11:\"node_modules/@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\", 14:\"node_modules/@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\", 18:\"node_modules/@openzeppelin/contracts/utils/Address.sol\", 21:\"node_modules/@openzeppelin/contracts/utils/StorageSlot.sol\", 41:\"node_modules/ether-email-auth/packages/contracts/src/utils/Verifier.sol\"\n    object \"Verifier_9789_deployed\" {\n        code {\n            {\n                /// @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\"\n                let _1 := memoryguard(0x80)\n                mstore(64, _1)\n                if iszero(lt(calldatasize(), 4))\n                {\n                    switch shr(224, calldataload(0))\n                    case 0x47ba75a8 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        mstore(_1, /** @src 41:1012:1014  \"20\" */ 0x14)\n                        /// @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\"\n                        return(_1, 32)\n                    }\n                    case 0x4f1ef286 {\n                        if slt(add(calldatasize(), not(3)), 64) { revert(0, 0) }\n                        let value0 := abi_decode_address()\n                        let offset := calldataload(36)\n                        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n                        let value1 := abi_decode_bytes(add(4, offset), calldatasize())\n                        /// @src 14:4405:4428  \"address(this) == __self\"\n                        let _2 := /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ and(/** @src 14:4422:4428  \"__self\" */ loadimmutable(\"1676\"), /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ sub(shl(160, 1), 1))\n                        /// @src 14:4405:4525  \"address(this) == __self || // Must be called through delegatecall...\"\n                        let expr := /** @src 14:4405:4428  \"address(this) == __self\" */ eq(/** @src 14:4413:4417  \"this\" */ address(), /** @src 14:4405:4428  \"address(this) == __self\" */ _2)\n                        /// @src 14:4405:4525  \"address(this) == __self || // Must be called through delegatecall...\"\n                        if iszero(expr)\n                        {\n                            expr := /** @src 14:4483:4525  \"ERC1967Utils.getImplementation() != __self\" */ iszero(eq(/** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ and(sload(/** @src 11:1327:1393  \"0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc\" */ 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc), /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ sub(shl(160, 1), 1)), /** @src 14:4483:4525  \"ERC1967Utils.getImplementation() != __self\" */ _2))\n                        }\n                        /// @src 14:4388:4639  \"if (...\"\n                        if expr\n                        {\n                            /// @src 14:4599:4628  \"UUPSUnauthorizedCallContext()\"\n                            mstore(/** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 0, /** @src 14:4599:4628  \"UUPSUnauthorizedCallContext()\" */ shl(225, 0x703e46dd))\n                            revert(/** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 0, 4)\n                        }\n                        /// @src 4:2303:2365  \"modifier onlyOwner() {...\"\n                        fun_checkOwner()\n                        /// @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\"\n                        let _3 := and(/** @src 14:5885:5921  \"IERC1822Proxiable(newImplementation)\" */ value0, /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ sub(shl(160, 1), 1))\n                        /// @src 14:5885:5937  \"IERC1822Proxiable(newImplementation).proxiableUUID()\"\n                        let _4 := /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ mload(64)\n                        /// @src 14:5885:5937  \"IERC1822Proxiable(newImplementation).proxiableUUID()\"\n                        mstore(_4, /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ shl(224, 0x52d1902d))\n                        /// @src 14:5885:5937  \"IERC1822Proxiable(newImplementation).proxiableUUID()\"\n                        let trySuccessCondition := staticcall(gas(), _3, _4, /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 4, /** @src 14:5885:5937  \"IERC1822Proxiable(newImplementation).proxiableUUID()\" */ _4, /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 32)\n                        /// @src 14:5885:5937  \"IERC1822Proxiable(newImplementation).proxiableUUID()\"\n                        let expr_1 := /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 0\n                        /// @src 14:5885:5937  \"IERC1822Proxiable(newImplementation).proxiableUUID()\"\n                        if trySuccessCondition\n                        {\n                            let _5 := /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 32\n                            /// @src 14:5885:5937  \"IERC1822Proxiable(newImplementation).proxiableUUID()\"\n                            if gt(/** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 32, /** @src 14:5885:5937  \"IERC1822Proxiable(newImplementation).proxiableUUID()\" */ returndatasize()) { _5 := returndatasize() }\n                            finalize_allocation(_4, _5)\n                            /// @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\"\n                            if slt(sub(/** @src 14:5885:5937  \"IERC1822Proxiable(newImplementation).proxiableUUID()\" */ add(_4, _5), /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ _4), 32) { revert(0, 0) }\n                            /// @src 14:5885:5937  \"IERC1822Proxiable(newImplementation).proxiableUUID()\"\n                            expr_1 := /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ mload(_4)\n                        }\n                        /// @src 14:5881:6318  \"try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {...\"\n                        switch iszero(trySuccessCondition)\n                        case 0 {\n                            /// @src 14:5975:6095  \"if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {...\"\n                            if /** @src 14:5979:6019  \"slot != ERC1967Utils.IMPLEMENTATION_SLOT\" */ iszero(eq(expr_1, /** @src 11:1327:1393  \"0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc\" */ 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc))\n                            /// @src 14:5975:6095  \"if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {...\"\n                            {\n                                /// @src 14:6046:6080  \"UUPSUnsupportedProxiableUUID(slot)\"\n                                mstore(/** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 0, /** @src 14:6046:6080  \"UUPSUnsupportedProxiableUUID(slot)\" */ shl(226, 0x2a875269))\n                                /// @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\"\n                                mstore(4, expr_1)\n                                /// @src 14:6046:6080  \"UUPSUnsupportedProxiableUUID(slot)\"\n                                revert(/** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 0, 36)\n                            }\n                            /// @src 11:2259:2378  \"if (newImplementation.code.length == 0) {...\"\n                            if /** @src 11:2263:2297  \"newImplementation.code.length == 0\" */ iszero(/** @src 11:2263:2292  \"newImplementation.code.length\" */ extcodesize(value0))\n                            /// @src 11:2259:2378  \"if (newImplementation.code.length == 0) {...\"\n                            {\n                                /// @src 11:2320:2367  \"ERC1967InvalidImplementation(newImplementation)\"\n                                mstore(/** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 0, /** @src 11:2320:2367  \"ERC1967InvalidImplementation(newImplementation)\" */ shl(224, 0x4c9c8ce3))\n                                /// @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\"\n                                mstore(4, _3)\n                                /// @src 11:2320:2367  \"ERC1967InvalidImplementation(newImplementation)\"\n                                revert(/** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 0, 36)\n                            }\n                            sstore(/** @src 11:1327:1393  \"0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc\" */ 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc, /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ or(and(sload(/** @src 11:1327:1393  \"0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc\" */ 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc), /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ shl(160, 0xffffffffffffffffffffffff)), _3))\n                            /// @src 11:2922:2949  \"Upgraded(newImplementation)\"\n                            log2(/** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 0, 0, /** @src 11:2922:2949  \"Upgraded(newImplementation)\" */ 0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b, _3)\n                            /// @src 11:2960:3108  \"if (data.length > 0) {...\"\n                            switch /** @src 11:2964:2979  \"data.length > 0\" */ iszero(iszero(/** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ mload(/** @src 11:2964:2975  \"data.length\" */ value1)))\n                            case /** @src 11:2960:3108  \"if (data.length > 0) {...\" */ 0 {\n                                /// @src 11:6644:6714  \"if (msg.value > 0) {...\"\n                                if /** @src 11:6648:6661  \"msg.value > 0\" */ iszero(iszero(/** @src 11:6648:6657  \"msg.value\" */ callvalue()))\n                                /// @src 11:6644:6714  \"if (msg.value > 0) {...\"\n                                {\n                                    /// @src 11:6684:6703  \"ERC1967NonPayable()\"\n                                    mstore(/** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 0, /** @src 11:6684:6703  \"ERC1967NonPayable()\" */ shl(224, 0xb398979f))\n                                    revert(/** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 0, 4)\n                                }\n                            }\n                            default /// @src 11:2960:3108  \"if (data.length > 0) {...\"\n                            {\n                                /// @src 18:4255:4280  \"target.delegatecall(data)\"\n                                let expr_component := delegatecall(gas(), value0, add(value1, /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 32), /** @src 18:4255:4280  \"target.delegatecall(data)\" */ mload(value1), /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 0, 0)\n                                /// @src 18:4255:4280  \"target.delegatecall(data)\"\n                                let data := /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 0\n                                switch returndatasize()\n                                case 0 { data := 96 }\n                                default {\n                                    let _6 := returndatasize()\n                                    let _7 := array_allocation_size_bytes(_6)\n                                    let memPtr := mload(64)\n                                    finalize_allocation(memPtr, _7)\n                                    mstore(memPtr, _6)\n                                    data := memPtr\n                                    returndatacopy(add(memPtr, 32), 0, returndatasize())\n                                }\n                                /// @src 18:4297:4352  \"verifyCallResultFromTarget(target, success, returndata)\"\n                                pop(fun_verifyCallResultFromTarget(value0, expr_component, /** @src 18:4255:4280  \"target.delegatecall(data)\" */ data))\n                            }\n                        }\n                        default /// @src 14:5881:6318  \"try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {...\"\n                        {\n                            /// @src 14:6247:6307  \"ERC1967Utils.ERC1967InvalidImplementation(newImplementation)\"\n                            mstore(/** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 0, /** @src 11:2320:2367  \"ERC1967InvalidImplementation(newImplementation)\" */ shl(224, 0x4c9c8ce3))\n                            /// @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\"\n                            mstore(4, _3)\n                            /// @src 14:6247:6307  \"ERC1967Utils.ERC1967InvalidImplementation(newImplementation)\"\n                            revert(/** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 0, 36)\n                        }\n                        return(0, 0)\n                    }\n                    case 0x506a0f91 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let memPos := mload(64)\n                        mstore(memPos, /** @src 41:1060:1063  \"605\" */ 0x025d)\n                        /// @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\"\n                        return(memPos, 32)\n                    }\n                    case 0x52d1902d {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        /// @src 14:4824:4969  \"if (address(this) != __self) {...\"\n                        if /** @src 14:4828:4851  \"address(this) != __self\" */ iszero(eq(/** @src 14:4836:4840  \"this\" */ address(), /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ and(/** @src 14:4845:4851  \"__self\" */ loadimmutable(\"1676\"), /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ sub(shl(160, 1), 1))))\n                        /// @src 14:4824:4969  \"if (address(this) != __self) {...\"\n                        {\n                            /// @src 14:4929:4958  \"UUPSUnauthorizedCallContext()\"\n                            mstore(/** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 0, /** @src 14:4599:4628  \"UUPSUnauthorizedCallContext()\" */ shl(225, 0x703e46dd))\n                            /// @src 14:4929:4958  \"UUPSUnauthorizedCallContext()\"\n                            revert(/** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 0, 4)\n                        }\n                        let memPos_1 := mload(64)\n                        mstore(memPos_1, /** @src 11:1327:1393  \"0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc\" */ 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc)\n                        /// @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\"\n                        return(memPos_1, 32)\n                    }\n                    case 0x715018a6 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        /// @src 4:2303:2365  \"modifier onlyOwner() {...\"\n                        fun_checkOwner()\n                        /// @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\"\n                        let _8 := sload(/** @src 4:1280:1345  \"assembly {...\" */ 65173360639460082030725920392146925864023520599682862633725751242436743107328)\n                        /// @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\"\n                        sstore(/** @src 4:1280:1345  \"assembly {...\" */ 65173360639460082030725920392146925864023520599682862633725751242436743107328, /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ and(_8, shl(160, 0xffffffffffffffffffffffff)))\n                        /// @src 4:3975:4015  \"OwnershipTransferred(oldOwner, newOwner)\"\n                        log3(/** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 0, 0, /** @src 4:3975:4015  \"OwnershipTransferred(oldOwner, newOwner)\" */ 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ and(_8, sub(shl(160, 1), 1)), 0)\n                        return(0, 0)\n                    }\n                    case 0x86c290ae {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let memPos_2 := mload(64)\n                        mstore(memPos_2, /** @src 41:962:965  \"255\" */ 0xff)\n                        /// @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\"\n                        return(memPos_2, 32)\n                    }\n                    case 0x8da5cb5b {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let cleaned := and(sload(/** @src 4:1280:1345  \"assembly {...\" */ 65173360639460082030725920392146925864023520599682862633725751242436743107328), /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ sub(shl(160, 1), 1))\n                        let memPos_3 := mload(64)\n                        mstore(memPos_3, cleaned)\n                        return(memPos_3, 32)\n                    }\n                    case 0x9ecd8310 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        let offset_1 := calldataload(4)\n                        if gt(offset_1, 0xffffffffffffffff) { revert(0, 0) }\n                        if slt(add(sub(calldatasize(), offset_1), not(3)), 0x0100) { revert(0, 0) }\n                        let memPtr_1 := mload(64)\n                        let newFreePtr := add(memPtr_1, 0x0100)\n                        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr_1))\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(0, 0x24)\n                        }\n                        mstore(64, newFreePtr)\n                        let offset_2 := calldataload(add(4, offset_1))\n                        if gt(offset_2, 0xffffffffffffffff) { revert(0, 0) }\n                        mstore(memPtr_1, abi_decode_bytes(add(add(offset_1, offset_2), 4), calldatasize()))\n                        let _9 := add(memPtr_1, 32)\n                        mstore(_9, calldataload(add(offset_1, 36)))\n                        let _10 := add(memPtr_1, 64)\n                        mstore(_10, calldataload(add(offset_1, 68)))\n                        let offset_3 := calldataload(add(offset_1, 100))\n                        if gt(offset_3, 0xffffffffffffffff) { revert(0, 0) }\n                        let _11 := abi_decode_bytes(add(add(offset_1, offset_3), 4), calldatasize())\n                        let _12 := add(memPtr_1, 96)\n                        mstore(_12, _11)\n                        let _13 := add(memPtr_1, 128)\n                        mstore(_13, calldataload(add(offset_1, 132)))\n                        let _14 := add(memPtr_1, 160)\n                        mstore(_14, calldataload(add(offset_1, 164)))\n                        let value := calldataload(add(offset_1, 196))\n                        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n                        let _15 := add(memPtr_1, 192)\n                        mstore(_15, value)\n                        let offset_4 := calldataload(add(offset_1, 228))\n                        if gt(offset_4, 0xffffffffffffffff) { revert(0, 0) }\n                        let _16 := abi_decode_bytes(add(add(offset_1, offset_4), 4), calldatasize())\n                        mstore(add(memPtr_1, 224), _16)\n                        /// @src 41:1627:1691  \"abi.decode(proof.proof, (uint256[2], uint256[2][2], uint256[2]))\"\n                        let _17 := add(_16, /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ mload(/** @src 41:1627:1691  \"abi.decode(proof.proof, (uint256[2], uint256[2][2], uint256[2]))\" */ _16))\n                        let _18 := add(_17, /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 32)\n                        if slt(sub(/** @src 41:1627:1691  \"abi.decode(proof.proof, (uint256[2], uint256[2][2], uint256[2]))\" */ _17, _16), /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 0x0100) { revert(0, 0) }\n                        let value0_1 := abi_decode_array_uint256_fromMemory(/** @src 41:1627:1691  \"abi.decode(proof.proof, (uint256[2], uint256[2][2], uint256[2]))\" */ add(_16, /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 32), _18)\n                        if iszero(slt(add(/** @src 41:1627:1691  \"abi.decode(proof.proof, (uint256[2], uint256[2][2], uint256[2]))\" */ _16, /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 127), _18)) { revert(0, 0) }\n                        let size := 0\n                        let _19 := 0\n                        _19 := 0\n                        size := 64\n                        let memPtr_2 := mload(size)\n                        finalize_allocation(memPtr_2, size)\n                        let dst := memPtr_2\n                        let srcEnd := add(/** @src 41:1627:1691  \"abi.decode(proof.proof, (uint256[2], uint256[2][2], uint256[2]))\" */ _16, /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 224)\n                        if gt(srcEnd, _18) { revert(0, 0) }\n                        let src := add(/** @src 41:1627:1691  \"abi.decode(proof.proof, (uint256[2], uint256[2][2], uint256[2]))\" */ _16, /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 96)\n                        for { } lt(src, srcEnd) { src := add(src, size) }\n                        {\n                            mstore(dst, abi_decode_array_uint256_fromMemory(src, _18))\n                            dst := add(dst, 32)\n                        }\n                        let value2 := abi_decode_array_uint256_fromMemory(srcEnd, _18)\n                        let size_1 := 0\n                        let _20 := 0\n                        _20 := 0\n                        size_1 := 1088\n                        let memPtr_3 := mload(size)\n                        finalize_allocation(memPtr_3, size_1)\n                        let size_2 := 0\n                        let _21 := 0\n                        _21 := 0\n                        size_2 := size_1\n                        calldatacopy(memPtr_3, calldatasize(), size_1)\n                        /// @src 41:1851:1867  \"proof.domainName\"\n                        let _22 := mload(memPtr_1)\n                        /// @src 41:1827:1883  \"_packBytes2Fields(bytes(proof.domainName), DOMAIN_BYTES)\"\n                        let var_mpos := /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 0\n                        /// @src 41:2902:2918  \"_paddedSize % 31\"\n                        let r := /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 0\n                        r := 0\n                        /// @src 41:2928:2975  \"uint256 numFields = (_paddedSize - remain) / 31\"\n                        let var_numFields := /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 8\n                        r := 0\n                        /// @src 41:3015:3029  \"numFields += 1\"\n                        var_numFields := /** @src 41:916:917  \"9\" */ 0x09\n                        /// @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\"\n                        let size_3 := 0\n                        if gt(/** @src 41:916:917  \"9\" */ var_numFields, /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 0xffffffffffffffff)\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(0, 0x24)\n                        }\n                        size_3 := add(shl(5, /** @src 41:916:917  \"9\" */ var_numFields), /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 0x20)\n                        let memPtr_4 := mload(size)\n                        finalize_allocation(memPtr_4, size_3)\n                        mstore(memPtr_4, /** @src 41:916:917  \"9\" */ var_numFields)\n                        /// @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\"\n                        let size_4 := 0\n                        if gt(/** @src 41:916:917  \"9\" */ var_numFields, /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 0xffffffffffffffff)\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(0, 0x24)\n                        }\n                        size_4 := size_3\n                        calldatacopy(add(memPtr_4, 32), calldatasize(), add(size_3, not(31)))\n                        /// @src 41:3131:3150  \"uint256 byteVal = 0\"\n                        let var_byteVal := /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 0\n                        /// @src 41:3165:3178  \"uint256 i = 0\"\n                        let var_i := /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 0\n                        /// @src 41:3160:3741  \"for (uint256 i = 0; i < numFields; i++) {...\"\n                        for { }\n                        /** @src 41:3180:3193  \"i < numFields\" */ lt(var_i, /** @src 41:916:917  \"9\" */ var_numFields)\n                        /// @src 41:3165:3178  \"uint256 i = 0\"\n                        {\n                            /// @src 41:3195:3198  \"i++\"\n                            var_i := /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ add(/** @src 41:3195:3198  \"i++\" */ var_i, /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 1)\n                        }\n                        /// @src 41:3195:3198  \"i++\"\n                        {\n                            /// @src 41:3219:3232  \"uint256 j = 0\"\n                            let var_j := /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 0\n                            /// @src 41:3214:3731  \"for (uint256 j = 0; j < 31; j++) {...\"\n                            for { }\n                            /** @src 41:3234:3240  \"j < 31\" */ lt(var_j, /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 31)\n                            /// @src 41:3219:3232  \"uint256 j = 0\"\n                            {\n                                /// @src 41:3242:3245  \"j++\"\n                                var_j := /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ add(/** @src 41:3242:3245  \"j++\" */ var_j, /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 1)\n                            }\n                            /// @src 41:3242:3245  \"j++\"\n                            {\n                                /// @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\"\n                                let product := mul(var_i, 31)\n                                if iszero(or(iszero(var_i), eq(31, div(product, var_i))))\n                                {\n                                    mstore(0, shl(224, 0x4e487b71))\n                                    mstore(4, 0x11)\n                                    revert(0, 36)\n                                }\n                                /// @src 41:3271:3281  \"i * 31 + j\"\n                                let expr_2 := checked_add_uint256(/** @src 41:3271:3277  \"i * 31\" */ product, /** @src 41:3271:3281  \"i * 31 + j\" */ var_j)\n                                /// @src 41:3299:3369  \"if (idx >= _paddedSize) {...\"\n                                if /** @src 41:3303:3321  \"idx >= _paddedSize\" */ iszero(lt(expr_2, /** @src 41:962:965  \"255\" */ 0xff))\n                                /// @src 41:3299:3369  \"if (idx >= _paddedSize) {...\"\n                                {\n                                    /// @src 41:3345:3350  \"break\"\n                                    break\n                                }\n                                /// @src 41:3390:3410  \"idx >= _bytes.length\"\n                                let _23 := iszero(lt(expr_2, /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ mload(/** @src 41:3397:3410  \"_bytes.length\" */ _22)))\n                                /// @src 41:3386:3548  \"if (idx >= _bytes.length) {...\"\n                                switch /** @src 41:3390:3410  \"idx >= _bytes.length\" */ _23\n                                case /** @src 41:3386:3548  \"if (idx >= _bytes.length) {...\" */ 0 {\n                                    /// @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\"\n                                    _23 := 0\n                                    /// @src 41:3492:3529  \"byteVal = uint256(uint8(_bytes[idx]))\"\n                                    var_byteVal := /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ shr(248, mload(add(add(_22, expr_2), 32)))\n                                }\n                                default /// @src 41:3386:3548  \"if (idx >= _bytes.length) {...\"\n                                {\n                                    /// @src 41:3434:3445  \"byteVal = 0\"\n                                    var_byteVal := /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 0\n                                }\n                                /// @src 41:3565:3717  \"if (j == 0) {...\"\n                                switch /** @src 41:3569:3575  \"j == 0\" */ iszero(var_j)\n                                case /** @src 41:3565:3717  \"if (j == 0) {...\" */ 0 {\n                                    /// @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\"\n                                    if iszero(eq(var_j, and(var_j, sub(shl(253, 1), 1))))\n                                    {\n                                        mstore(0, shl(224, 0x4e487b71))\n                                        mstore(4, 0x11)\n                                        revert(0, 36)\n                                    }\n                                    mstore(/** @src 41:3665:3698  \"fields[i] += (byteVal << (8 * j))\" */ memory_array_index_access_uint256_dyn(memPtr_4, var_i), checked_add_uint256(/** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ mload(/** @src 41:3665:3698  \"fields[i] += (byteVal << (8 * j))\" */ memory_array_index_access_uint256_dyn(memPtr_4, var_i)), /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ shl(shl(3, var_j), var_byteVal)))\n                                }\n                                default /// @src 41:3565:3717  \"if (j == 0) {...\"\n                                {\n                                    /// @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\"\n                                    mstore(/** @src 41:3599:3618  \"fields[i] = byteVal\" */ memory_array_index_access_uint256_dyn(memPtr_4, var_i), /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ var_byteVal)\n                                }\n                            }\n                        }\n                        /// @src 41:3750:3763  \"return fields\"\n                        var_mpos := memPtr_4\n                        /// @src 41:1898:1911  \"uint256 i = 0\"\n                        let var_i_1 := /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 0\n                        /// @src 41:1893:1993  \"for (uint256 i = 0; i < DOMAIN_FIELDS; i++) {...\"\n                        for { }\n                        /** @src 41:1913:1930  \"i < DOMAIN_FIELDS\" */ lt(var_i_1, /** @src 41:916:917  \"9\" */ var_numFields)\n                        /// @src 41:1898:1911  \"uint256 i = 0\"\n                        {\n                            /// @src 41:1932:1935  \"i++\"\n                            var_i_1 := /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ add(/** @src 41:1932:1935  \"i++\" */ var_i_1, /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 1)\n                        }\n                        /// @src 41:1932:1935  \"i++\"\n                        {\n                            /// @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\"\n                            mstore(/** @src 41:1951:1982  \"pubSignals[i] = stringFields[i]\" */ memory_array_index_access_uint256(memPtr_3, var_i_1), /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ mload(/** @src 41:1967:1982  \"stringFields[i]\" */ memory_array_index_access_uint256_dyn(memPtr_4, var_i_1)))\n                        }\n                        /// @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\"\n                        mstore(add(memPtr_3, 288), mload(/** @src 41:2038:2057  \"proof.publicKeyHash\" */ _9))\n                        /// @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\"\n                        let _24 := mload(/** @src 41:2108:2128  \"proof.emailNullifier\" */ _13)\n                        /// @src 41:2068:2129  \"pubSignals[DOMAIN_FIELDS + 1] = uint256(proof.emailNullifier)\"\n                        let addr := /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 0\n                        let _25 := 0\n                        _25 := 0\n                        addr := add(memPtr_3, 320)\n                        mstore(addr, _24)\n                        let _26 := mload(/** @src 41:2179:2194  \"proof.timestamp\" */ _10)\n                        /// @src 41:2139:2195  \"pubSignals[DOMAIN_FIELDS + 2] = uint256(proof.timestamp)\"\n                        let addr_1 := /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 0\n                        let _27 := 0\n                        _27 := 0\n                        addr_1 := add(memPtr_3, 352)\n                        mstore(addr_1, _26)\n                        /// @src 41:2257:2276  \"proof.maskedSubject\"\n                        let _28 := mload(_12)\n                        /// @src 41:2220:2314  \"_packBytes2Fields(...\"\n                        let var_mpos_1 := /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 0\n                        /// @src 41:2902:2918  \"_paddedSize % 31\"\n                        let r_1 := /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 0\n                        r_1 := 0\n                        /// @src 41:2928:2975  \"uint256 numFields = (_paddedSize - remain) / 31\"\n                        let var_numFields_1 := /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 19\n                        r_1 := 0\n                        /// @src 41:3015:3029  \"numFields += 1\"\n                        var_numFields_1 := /** @src 41:1012:1014  \"20\" */ 0x14\n                        /// @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\"\n                        let size_5 := 0\n                        if gt(/** @src 41:1012:1014  \"20\" */ var_numFields_1, /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 0xffffffffffffffff)\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(0, 0x24)\n                        }\n                        size_5 := add(shl(5, /** @src 41:1012:1014  \"20\" */ var_numFields_1), /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 0x20)\n                        let memPtr_5 := mload(size)\n                        finalize_allocation(memPtr_5, size_5)\n                        mstore(memPtr_5, /** @src 41:1012:1014  \"20\" */ var_numFields_1)\n                        /// @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\"\n                        let size_6 := 0\n                        if gt(/** @src 41:1012:1014  \"20\" */ var_numFields_1, /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 0xffffffffffffffff)\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(0, 0x24)\n                        }\n                        size_6 := size_5\n                        calldatacopy(add(memPtr_5, 32), calldatasize(), add(size_5, not(31)))\n                        /// @src 41:3131:3150  \"uint256 byteVal = 0\"\n                        let var_byteVal_1 := /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 0\n                        /// @src 41:3165:3178  \"uint256 i = 0\"\n                        let var_i_2 := /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 0\n                        /// @src 41:3160:3741  \"for (uint256 i = 0; i < numFields; i++) {...\"\n                        for { }\n                        /** @src 41:3180:3193  \"i < numFields\" */ lt(var_i_2, /** @src 41:1012:1014  \"20\" */ var_numFields_1)\n                        /// @src 41:3165:3178  \"uint256 i = 0\"\n                        {\n                            /// @src 41:3195:3198  \"i++\"\n                            var_i_2 := /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ add(/** @src 41:3195:3198  \"i++\" */ var_i_2, /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 1)\n                        }\n                        /// @src 41:3195:3198  \"i++\"\n                        {\n                            /// @src 41:3219:3232  \"uint256 j = 0\"\n                            let var_j_1 := /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 0\n                            /// @src 41:3214:3731  \"for (uint256 j = 0; j < 31; j++) {...\"\n                            for { }\n                            /** @src 41:3234:3240  \"j < 31\" */ lt(var_j_1, /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 31)\n                            /// @src 41:3219:3232  \"uint256 j = 0\"\n                            {\n                                /// @src 41:3242:3245  \"j++\"\n                                var_j_1 := /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ add(/** @src 41:3242:3245  \"j++\" */ var_j_1, /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 1)\n                            }\n                            /// @src 41:3242:3245  \"j++\"\n                            {\n                                /// @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\"\n                                let product_1 := mul(var_i_2, 31)\n                                if iszero(or(iszero(var_i_2), eq(31, div(product_1, var_i_2))))\n                                {\n                                    mstore(0, shl(224, 0x4e487b71))\n                                    mstore(4, 0x11)\n                                    revert(0, 36)\n                                }\n                                /// @src 41:3271:3281  \"i * 31 + j\"\n                                let expr_3 := checked_add_uint256(/** @src 41:3271:3277  \"i * 31\" */ product_1, /** @src 41:3271:3281  \"i * 31 + j\" */ var_j_1)\n                                /// @src 41:3299:3369  \"if (idx >= _paddedSize) {...\"\n                                if /** @src 41:3303:3321  \"idx >= _paddedSize\" */ iszero(lt(expr_3, /** @src 41:1060:1063  \"605\" */ 0x025d))\n                                /// @src 41:3299:3369  \"if (idx >= _paddedSize) {...\"\n                                {\n                                    /// @src 41:3345:3350  \"break\"\n                                    break\n                                }\n                                /// @src 41:3390:3410  \"idx >= _bytes.length\"\n                                let _29 := iszero(lt(expr_3, /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ mload(/** @src 41:3397:3410  \"_bytes.length\" */ _28)))\n                                /// @src 41:3386:3548  \"if (idx >= _bytes.length) {...\"\n                                switch /** @src 41:3390:3410  \"idx >= _bytes.length\" */ _29\n                                case /** @src 41:3386:3548  \"if (idx >= _bytes.length) {...\" */ 0 {\n                                    /// @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\"\n                                    _29 := 0\n                                    /// @src 41:3492:3529  \"byteVal = uint256(uint8(_bytes[idx]))\"\n                                    var_byteVal_1 := /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ shr(248, mload(add(add(_28, expr_3), 32)))\n                                }\n                                default /// @src 41:3386:3548  \"if (idx >= _bytes.length) {...\"\n                                {\n                                    /// @src 41:3434:3445  \"byteVal = 0\"\n                                    var_byteVal_1 := /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 0\n                                }\n                                /// @src 41:3565:3717  \"if (j == 0) {...\"\n                                switch /** @src 41:3569:3575  \"j == 0\" */ iszero(var_j_1)\n                                case /** @src 41:3565:3717  \"if (j == 0) {...\" */ 0 {\n                                    /// @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\"\n                                    if iszero(eq(var_j_1, and(var_j_1, sub(shl(253, 1), 1))))\n                                    {\n                                        mstore(0, shl(224, 0x4e487b71))\n                                        mstore(4, 0x11)\n                                        revert(0, 36)\n                                    }\n                                    mstore(/** @src 41:3665:3698  \"fields[i] += (byteVal << (8 * j))\" */ memory_array_index_access_uint256_dyn(memPtr_5, var_i_2), checked_add_uint256(/** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ mload(/** @src 41:3665:3698  \"fields[i] += (byteVal << (8 * j))\" */ memory_array_index_access_uint256_dyn(memPtr_5, var_i_2)), /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ shl(shl(3, var_j_1), var_byteVal_1)))\n                                }\n                                default /// @src 41:3565:3717  \"if (j == 0) {...\"\n                                {\n                                    /// @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\"\n                                    mstore(/** @src 41:3599:3618  \"fields[i] = byteVal\" */ memory_array_index_access_uint256_dyn(memPtr_5, var_i_2), /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ var_byteVal_1)\n                                }\n                            }\n                        }\n                        /// @src 41:3750:3763  \"return fields\"\n                        var_mpos_1 := memPtr_5\n                        /// @src 41:2329:2342  \"uint256 i = 0\"\n                        let var_i_3 := /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 0\n                        /// @src 41:2324:2445  \"for (uint256 i = 0; i < SUBJECT_FIELDS; i++) {...\"\n                        for { }\n                        /** @src 41:2344:2362  \"i < SUBJECT_FIELDS\" */ lt(var_i_3, /** @src 41:1012:1014  \"20\" */ var_numFields_1)\n                        /// @src 41:2329:2342  \"uint256 i = 0\"\n                        {\n                            /// @src 41:2364:2367  \"i++\"\n                            var_i_3 := /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ add(/** @src 41:2364:2367  \"i++\" */ var_i_3, /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 1)\n                        }\n                        /// @src 41:2364:2367  \"i++\"\n                        {\n                            /// @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\"\n                            let _30 := mload(/** @src 41:2419:2434  \"stringFields[i]\" */ memory_array_index_access_uint256_dyn(memPtr_5, var_i_3))\n                            /// @src 41:2394:2415  \"DOMAIN_FIELDS + 3 + i\"\n                            let sum := /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 0\n                            sum := add(12, var_i_3)\n                            if gt(12, sum)\n                            {\n                                mstore(0, shl(224, 0x4e487b71))\n                                mstore(4, 0x11)\n                                revert(0, 36)\n                            }\n                            mstore(/** @src 41:2383:2434  \"pubSignals[DOMAIN_FIELDS + 3 + i] = stringFields[i]\" */ memory_array_index_access_uint256(memPtr_3, /** @src 41:2394:2415  \"DOMAIN_FIELDS + 3 + i\" */ sum), /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ _30)\n                        }\n                        let _31 := mload(/** @src 41:2524:2541  \"proof.accountSalt\" */ _14)\n                        /// @src 41:2454:2551  \"pubSignals[DOMAIN_FIELDS + 3 + SUBJECT_FIELDS] = uint256(...\"\n                        let addr_2 := /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 0\n                        let _32 := 0\n                        _32 := 0\n                        addr_2 := add(memPtr_3, 1024)\n                        mstore(addr_2, _31)\n                        let cleaned_1 := iszero(iszero(mload(/** @src 41:2614:2631  \"proof.isCodeExist\" */ _15)))\n                        /// @src 41:2614:2663  \"proof.isCodeExist...\"\n                        let expr_4 := /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 0\n                        /// @src 41:2614:2663  \"proof.isCodeExist...\"\n                        switch cleaned_1\n                        case 0 {\n                            expr_4 := /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 0\n                        }\n                        default /// @src 41:2614:2663  \"proof.isCodeExist...\"\n                        {\n                            expr_4 := /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 1\n                        }\n                        /// @src 41:2561:2663  \"pubSignals[DOMAIN_FIELDS + 3 + SUBJECT_FIELDS + 1] = proof.isCodeExist...\"\n                        let addr_3 := /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 0\n                        let _33 := 0\n                        _33 := 0\n                        addr_3 := add(memPtr_3, 1056)\n                        mstore(addr_3, and(/** @src 41:2561:2663  \"pubSignals[DOMAIN_FIELDS + 3 + SUBJECT_FIELDS + 1] = proof.isCodeExist...\" */ expr_4, /** @src 41:962:965  \"255\" */ 0xff))\n                        /// @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\"\n                        let cleaned_2 := and(sload(0), sub(shl(160, 1), 1))\n                        /// @src 41:2681:2732  \"groth16Verifier.verifyProof(pA, pB, pC, pubSignals)\"\n                        let _34 := /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ mload(size)\n                        /// @src 41:2681:2732  \"groth16Verifier.verifyProof(pA, pB, pC, pubSignals)\"\n                        mstore(_34, /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ shl(224, 0x8525a61d))\n                        abi_encode_array_uint256(value0_1, /** @src 41:2681:2732  \"groth16Verifier.verifyProof(pA, pB, pC, pubSignals)\" */ add(_34, /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 4))\n                        let pos := add(/** @src 41:2681:2732  \"groth16Verifier.verifyProof(pA, pB, pC, pubSignals)\" */ _34, /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 68)\n                        pos := pos\n                        let srcPtr := memPtr_2\n                        let i := 0\n                        for { } lt(i, 0x02) { i := add(i, 1) }\n                        {\n                            abi_encode_array_uint256(mload(srcPtr), pos)\n                            pos := add(pos, size)\n                            srcPtr := add(srcPtr, 32)\n                        }\n                        abi_encode_array_uint256(value2, add(/** @src 41:2681:2732  \"groth16Verifier.verifyProof(pA, pB, pC, pubSignals)\" */ _34, /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 196))\n                        let pos_1 := add(/** @src 41:2681:2732  \"groth16Verifier.verifyProof(pA, pB, pC, pubSignals)\" */ _34, /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 260)\n                        pos_1 := pos_1\n                        let srcPtr_1 := memPtr_3\n                        let i_1 := 0\n                        for { } lt(i_1, 34) { i_1 := add(i_1, 1) }\n                        {\n                            mstore(pos_1, mload(srcPtr_1))\n                            pos_1 := add(pos_1, 32)\n                            srcPtr_1 := add(srcPtr_1, 32)\n                        }\n                        /// @src 41:2681:2732  \"groth16Verifier.verifyProof(pA, pB, pC, pubSignals)\"\n                        let _35 := staticcall(gas(), cleaned_2, _34, 1348, _34, /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 32)\n                        /// @src 41:2681:2732  \"groth16Verifier.verifyProof(pA, pB, pC, pubSignals)\"\n                        if iszero(_35)\n                        {\n                            /// @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\"\n                            let pos_2 := mload(size)\n                            returndatacopy(pos_2, 0, returndatasize())\n                            revert(pos_2, returndatasize())\n                        }\n                        /// @src 41:2681:2732  \"groth16Verifier.verifyProof(pA, pB, pC, pubSignals)\"\n                        let expr_5 := /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 0\n                        /// @src 41:2681:2732  \"groth16Verifier.verifyProof(pA, pB, pC, pubSignals)\"\n                        if _35\n                        {\n                            let _36 := /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 32\n                            /// @src 41:2681:2732  \"groth16Verifier.verifyProof(pA, pB, pC, pubSignals)\"\n                            if gt(/** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 32, /** @src 41:2681:2732  \"groth16Verifier.verifyProof(pA, pB, pC, pubSignals)\" */ returndatasize()) { _36 := returndatasize() }\n                            finalize_allocation(_34, _36)\n                            /// @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\"\n                            if slt(sub(/** @src 41:2681:2732  \"groth16Verifier.verifyProof(pA, pB, pC, pubSignals)\" */ add(_34, _36), /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ _34), 32) { revert(0, 0) }\n                            let value_1 := mload(_34)\n                            if iszero(eq(value_1, iszero(iszero(value_1)))) { revert(0, 0) }\n                            /// @src 41:2681:2732  \"groth16Verifier.verifyProof(pA, pB, pC, pubSignals)\"\n                            expr_5 := value_1\n                        }\n                        /// @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\"\n                        let memPos_4 := mload(size)\n                        mstore(memPos_4, iszero(iszero(expr_5)))\n                        return(memPos_4, 32)\n                    }\n                    case 0xad3cb1cc {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let size_7 := 0\n                        let _37 := 0\n                        _37 := 0\n                        size_7 := 64\n                        let memPtr_6 := mload(size_7)\n                        finalize_allocation(memPtr_6, size_7)\n                        mstore(memPtr_6, 5)\n                        let _38 := add(memPtr_6, 32)\n                        mstore(_38, \"5.0.0\")\n                        let memPos_5 := mload(size_7)\n                        mstore(memPos_5, 32)\n                        let length := mload(memPtr_6)\n                        mstore(add(memPos_5, 32), length)\n                        mcopy(add(memPos_5, size_7), _38, length)\n                        mstore(add(add(memPos_5, length), size_7), 0)\n                        return(memPos_5, add(sub(add(memPos_5, and(add(length, 31), not(31))), memPos_5), size_7))\n                    }\n                    case 0xb2defd78 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 0) { revert(0, 0) }\n                        let memPos_6 := mload(64)\n                        mstore(memPos_6, /** @src 41:916:917  \"9\" */ 0x09)\n                        /// @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\"\n                        return(memPos_6, 32)\n                    }\n                    case 0xc4d66de8 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        let value0_2 := abi_decode_address()\n                        let _39 := sload(/** @src 5:8837:8901  \"assembly {...\" */ 108904022758810753673719992590105913556127789646572562039383141376366747609600)\n                        /// @src 5:4301:4317  \"!$._initializing\"\n                        let _40 := iszero(/** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ and(shr(64, _39), 0xff))\n                        let value_2 := and(_39, 0xffffffffffffffff)\n                        /// @src 5:4726:4760  \"initialized == 0 && isTopLevelCall\"\n                        let expr_6 := /** @src 5:4726:4742  \"initialized == 0\" */ iszero(value_2)\n                        /// @src 5:4726:4760  \"initialized == 0 && isTopLevelCall\"\n                        if expr_6 { expr_6 := _40 }\n                        /// @src 5:4790:4840  \"initialized == 1 && address(this).code.length == 0\"\n                        let expr_7 := /** @src 5:4790:4806  \"initialized == 1\" */ eq(value_2, /** @src 5:4805:4806  \"1\" */ 0x01)\n                        /// @src 5:4790:4840  \"initialized == 1 && address(this).code.length == 0\"\n                        if expr_7\n                        {\n                            expr_7 := /** @src 5:4810:4840  \"address(this).code.length == 0\" */ iszero(/** @src 5:4810:4835  \"address(this).code.length\" */ extcodesize(/** @src 5:4818:4822  \"this\" */ address()))\n                        }\n                        /// @src 5:4855:4885  \"!initialSetup && !construction\"\n                        let expr_8 := /** @src 5:4855:4868  \"!initialSetup\" */ iszero(expr_6)\n                        /// @src 5:4855:4885  \"!initialSetup && !construction\"\n                        if expr_8\n                        {\n                            expr_8 := /** @src 5:4872:4885  \"!construction\" */ iszero(expr_7)\n                        }\n                        /// @src 5:4851:4942  \"if (!initialSetup && !construction) {...\"\n                        if expr_8\n                        {\n                            /// @src 5:4908:4931  \"InvalidInitialization()\"\n                            mstore(/** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 0, /** @src 5:4908:4931  \"InvalidInitialization()\" */ shl(224, 0xf92ee8a9))\n                            revert(/** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 0, 4)\n                        }\n                        sstore(/** @src 5:8837:8901  \"assembly {...\" */ 108904022758810753673719992590105913556127789646572562039383141376366747609600, /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ or(and(_39, not(0xffffffffffffffff)), /** @src 5:4805:4806  \"1\" */ 0x01))\n                        /// @src 5:4979:5046  \"if (isTopLevelCall) {...\"\n                        if _40\n                        {\n                            /// @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\"\n                            sstore(/** @src 5:8837:8901  \"assembly {...\" */ 108904022758810753673719992590105913556127789646572562039383141376366747609600, /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ or(and(_39, not(0xffffffffffffffffff)), 0x010000000000000001))\n                        }\n                        /// @src 5:6893:6969  \"modifier onlyInitializing() {...\"\n                        fun_checkInitializing()\n                        fun_checkInitializing()\n                        /// @src 5:6961:6962  \"_\"\n                        fun_transferOwnership_inner(value0_2)\n                        /// @src 41:1373:1394  \"new Groth16Verifier()\"\n                        let _41 := /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ mload(64)\n                        /// @src 41:1373:1394  \"new Groth16Verifier()\"\n                        let _42 := datasize(\"Groth16Verifier_9369\")\n                        let _43 := add(_41, _42)\n                        if or(gt(_43, /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 0xffffffffffffffff), /** @src 41:1373:1394  \"new Groth16Verifier()\" */ lt(_43, _41))\n                        {\n                            /// @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\"\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x41)\n                            revert(0, 0x24)\n                        }\n                        /// @src 41:1373:1394  \"new Groth16Verifier()\"\n                        datacopy(_41, dataoffset(\"Groth16Verifier_9369\"), _42)\n                        let expr_address := create(/** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 0, /** @src 41:1373:1394  \"new Groth16Verifier()\" */ _41, sub(_43, _41))\n                        if iszero(expr_address)\n                        {\n                            /// @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\"\n                            let pos_3 := mload(64)\n                            returndatacopy(pos_3, 0, returndatasize())\n                            revert(pos_3, returndatasize())\n                        }\n                        sstore(0, or(and(sload(0), shl(160, 0xffffffffffffffffffffffff)), and(expr_address, sub(shl(160, 1), 1))))\n                        /// @src 5:5066:5167  \"if (isTopLevelCall) {...\"\n                        if _40\n                        {\n                            /// @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\"\n                            sstore(/** @src 5:8837:8901  \"assembly {...\" */ 108904022758810753673719992590105913556127789646572562039383141376366747609600, /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ and(sload(/** @src 5:8837:8901  \"assembly {...\" */ 108904022758810753673719992590105913556127789646572562039383141376366747609600), /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ not(0xff0000000000000000)))\n                            /// @src 5:5142:5156  \"Initialized(1)\"\n                            let _44 := /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ mload(64)\n                            mstore(_44, /** @src 5:4805:4806  \"1\" */ 0x01)\n                            /// @src 5:5142:5156  \"Initialized(1)\"\n                            log1(_44, /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 32, /** @src 5:5142:5156  \"Initialized(1)\" */ 0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2)\n                        }\n                        /// @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\"\n                        return(0, 0)\n                    }\n                    case 0xe6a28005 {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 64) { revert(0, 0) }\n                        let offset_5 := calldataload(4)\n                        if gt(offset_5, 0xffffffffffffffff) { revert(0, 0) }\n                        let value0_3 := abi_decode_bytes(add(4, offset_5), calldatasize())\n                        let value_3 := calldataload(36)\n                        let var_mpos_2 := 0\n                        let r_2 := mod(value_3, /** @src 41:2916:2918  \"31\" */ 0x1f)\n                        /// @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\"\n                        let diff := sub(value_3, r_2)\n                        if gt(diff, value_3)\n                        {\n                            mstore(0, shl(224, 0x4e487b71))\n                            mstore(4, 0x11)\n                            revert(0, 36)\n                        }\n                        /// @src 41:2928:2975  \"uint256 numFields = (_paddedSize - remain) / 31\"\n                        let var_numFields_2 := /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ div(diff, /** @src 41:2916:2918  \"31\" */ 0x1f)\n                        /// @src 41:2985:3040  \"if (remain > 0) {...\"\n                        if /** @src 41:2989:2999  \"remain > 0\" */ iszero(iszero(r_2))\n                        /// @src 41:2985:3040  \"if (remain > 0) {...\"\n                        {\n                            /// @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\"\n                            let sum_1 := add(var_numFields_2, 1)\n                            if gt(var_numFields_2, sum_1)\n                            {\n                                mstore(0, shl(224, 0x4e487b71))\n                                mstore(4, 0x11)\n                                revert(0, 36)\n                            }\n                            /// @src 41:3015:3029  \"numFields += 1\"\n                            var_numFields_2 := sum_1\n                        }\n                        /// @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\"\n                        let _45 := array_allocation_size_array_uint256_dyn(var_numFields_2)\n                        let memPtr_7 := mload(64)\n                        finalize_allocation(memPtr_7, _45)\n                        mstore(memPtr_7, var_numFields_2)\n                        let dataSize := array_allocation_size_array_uint256_dyn(var_numFields_2)\n                        let dataStart := add(memPtr_7, 32)\n                        calldatacopy(dataStart, calldatasize(), add(dataSize, not(31)))\n                        /// @src 41:3131:3150  \"uint256 byteVal = 0\"\n                        let var_byteVal_2 := /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 0\n                        /// @src 41:3165:3178  \"uint256 i = 0\"\n                        let var_i_4 := /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 0\n                        /// @src 41:3160:3741  \"for (uint256 i = 0; i < numFields; i++) {...\"\n                        for { }\n                        /** @src 41:3180:3193  \"i < numFields\" */ lt(var_i_4, var_numFields_2)\n                        /// @src 41:3165:3178  \"uint256 i = 0\"\n                        {\n                            /// @src 41:3195:3198  \"i++\"\n                            var_i_4 := /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ add(/** @src 41:3195:3198  \"i++\" */ var_i_4, /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 1)\n                        }\n                        /// @src 41:3195:3198  \"i++\"\n                        {\n                            /// @src 41:3219:3232  \"uint256 j = 0\"\n                            let var_j_2 := /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 0\n                            /// @src 41:3214:3731  \"for (uint256 j = 0; j < 31; j++) {...\"\n                            for { }\n                            /** @src 41:3234:3240  \"j < 31\" */ lt(var_j_2, /** @src 41:2916:2918  \"31\" */ 0x1f)\n                            /// @src 41:3219:3232  \"uint256 j = 0\"\n                            {\n                                /// @src 41:3242:3245  \"j++\"\n                                var_j_2 := /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ add(/** @src 41:3242:3245  \"j++\" */ var_j_2, /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 1)\n                            }\n                            /// @src 41:3242:3245  \"j++\"\n                            {\n                                /// @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\"\n                                let product_2 := mul(var_i_4, /** @src 41:2916:2918  \"31\" */ 0x1f)\n                                /// @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\"\n                                if iszero(or(iszero(var_i_4), eq(/** @src 41:2916:2918  \"31\" */ 0x1f, /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ div(product_2, var_i_4))))\n                                {\n                                    mstore(0, shl(224, 0x4e487b71))\n                                    mstore(4, 0x11)\n                                    revert(0, 36)\n                                }\n                                /// @src 41:3271:3281  \"i * 31 + j\"\n                                let expr_9 := checked_add_uint256(/** @src 41:3271:3277  \"i * 31\" */ product_2, /** @src 41:3271:3281  \"i * 31 + j\" */ var_j_2)\n                                /// @src 41:3299:3369  \"if (idx >= _paddedSize) {...\"\n                                if /** @src 41:3303:3321  \"idx >= _paddedSize\" */ iszero(lt(expr_9, value_3))\n                                /// @src 41:3299:3369  \"if (idx >= _paddedSize) {...\"\n                                {\n                                    /// @src 41:3345:3350  \"break\"\n                                    break\n                                }\n                                /// @src 41:3390:3410  \"idx >= _bytes.length\"\n                                let _46 := iszero(lt(expr_9, /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ mload(/** @src 41:3397:3410  \"_bytes.length\" */ value0_3)))\n                                /// @src 41:3386:3548  \"if (idx >= _bytes.length) {...\"\n                                switch /** @src 41:3390:3410  \"idx >= _bytes.length\" */ _46\n                                case /** @src 41:3386:3548  \"if (idx >= _bytes.length) {...\" */ 0 {\n                                    /// @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\"\n                                    _46 := 0\n                                    /// @src 41:3492:3529  \"byteVal = uint256(uint8(_bytes[idx]))\"\n                                    var_byteVal_2 := /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ shr(248, mload(add(add(value0_3, expr_9), 32)))\n                                }\n                                default /// @src 41:3386:3548  \"if (idx >= _bytes.length) {...\"\n                                {\n                                    /// @src 41:3434:3445  \"byteVal = 0\"\n                                    var_byteVal_2 := /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 0\n                                }\n                                /// @src 41:3565:3717  \"if (j == 0) {...\"\n                                switch /** @src 41:3569:3575  \"j == 0\" */ iszero(var_j_2)\n                                case /** @src 41:3565:3717  \"if (j == 0) {...\" */ 0 {\n                                    /// @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\"\n                                    if iszero(eq(var_j_2, and(var_j_2, sub(shl(253, 1), 1))))\n                                    {\n                                        mstore(0, shl(224, 0x4e487b71))\n                                        mstore(4, 0x11)\n                                        revert(0, 36)\n                                    }\n                                    mstore(/** @src 41:3665:3698  \"fields[i] += (byteVal << (8 * j))\" */ memory_array_index_access_uint256_dyn(memPtr_7, var_i_4), checked_add_uint256(/** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ mload(/** @src 41:3665:3698  \"fields[i] += (byteVal << (8 * j))\" */ memory_array_index_access_uint256_dyn(memPtr_7, var_i_4)), /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ shl(shl(3, var_j_2), var_byteVal_2)))\n                                }\n                                default /// @src 41:3565:3717  \"if (j == 0) {...\"\n                                {\n                                    /// @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\"\n                                    mstore(/** @src 41:3599:3618  \"fields[i] = byteVal\" */ memory_array_index_access_uint256_dyn(memPtr_7, var_i_4), /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ var_byteVal_2)\n                                }\n                            }\n                        }\n                        /// @src 41:3750:3763  \"return fields\"\n                        var_mpos_2 := memPtr_7\n                        /// @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\"\n                        let memPos_7 := mload(64)\n                        let tail := add(memPos_7, 32)\n                        mstore(memPos_7, 32)\n                        let pos_4 := tail\n                        let length_1 := mload(memPtr_7)\n                        mstore(tail, length_1)\n                        pos_4 := add(memPos_7, 64)\n                        let srcPtr_2 := dataStart\n                        let i_2 := 0\n                        for { } lt(i_2, length_1) { i_2 := add(i_2, 1) }\n                        {\n                            mstore(pos_4, mload(srcPtr_2))\n                            pos_4 := add(pos_4, 32)\n                            srcPtr_2 := add(srcPtr_2, 32)\n                        }\n                        return(memPos_7, sub(pos_4, memPos_7))\n                    }\n                    case 0xf2fde38b {\n                        if callvalue() { revert(0, 0) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(0, 0) }\n                        let value0_4 := abi_decode_address()\n                        /// @src 4:2303:2365  \"modifier onlyOwner() {...\"\n                        fun_checkOwner()\n                        /// @src 4:2357:2358  \"_\"\n                        fun_transferOwnership_inner(value0_4)\n                        /// @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\"\n                        return(0, 0)\n                    }\n                }\n                revert(0, 0)\n            }\n            function abi_decode_address() -> value\n            {\n                value := calldataload(4)\n                if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                {\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(/** @src -1:-1:-1 */ 0, /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 0x24)\n                }\n                mstore(64, newFreePtr)\n            }\n            function array_allocation_size_bytes(length) -> size\n            {\n                if gt(length, 0xffffffffffffffff)\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(0, 0x24)\n                }\n                size := add(and(add(length, 31), not(31)), 0x20)\n            }\n            function abi_decode_bytes(offset, end) -> array\n            {\n                if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n                let length := calldataload(offset)\n                let src := add(offset, 0x20)\n                let array_1 := /** @src -1:-1:-1 */ 0\n                /// @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\"\n                let _1 := array_allocation_size_bytes(length)\n                let memPtr := mload(64)\n                finalize_allocation(memPtr, _1)\n                array_1 := memPtr\n                mstore(memPtr, length)\n                if gt(add(src, length), end)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\"\n                calldatacopy(add(memPtr, 0x20), src, length)\n                mstore(add(add(memPtr, length), 0x20), /** @src -1:-1:-1 */ 0)\n                /// @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\"\n                array := memPtr\n            }\n            function abi_decode_array_uint256_fromMemory(offset, end) -> array\n            {\n                if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n                let size := /** @src -1:-1:-1 */ 0\n                /// @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\"\n                let _1 := /** @src -1:-1:-1 */ 0\n                /// @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\"\n                _1 := /** @src -1:-1:-1 */ 0\n                /// @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\"\n                size := 64\n                let memPtr := mload(64)\n                finalize_allocation(memPtr, 64)\n                let dst := memPtr\n                let srcEnd := add(offset, 64)\n                if gt(srcEnd, end)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\"\n                let src := offset\n                for { } lt(src, srcEnd) { src := add(src, 0x20) }\n                {\n                    mstore(dst, mload(src))\n                    dst := add(dst, 0x20)\n                }\n                array := memPtr\n            }\n            function checked_add_uint256(x, y) -> sum\n            {\n                sum := add(x, y)\n                if gt(x, sum)\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x11)\n                    revert(0, 0x24)\n                }\n            }\n            function memory_array_index_access_uint256_dyn(baseRef, index) -> addr\n            {\n                if iszero(lt(index, mload(baseRef)))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x32)\n                    revert(0, 0x24)\n                }\n                addr := add(add(baseRef, shl(5, index)), 32)\n            }\n            function memory_array_index_access_uint256(baseRef, index) -> addr\n            {\n                if iszero(lt(index, 0x22))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x32)\n                    revert(0, 0x24)\n                }\n                addr := add(baseRef, shl(5, index))\n            }\n            function abi_encode_array_uint256(value, pos)\n            {\n                pos := pos\n                let srcPtr := value\n                let i := 0\n                for { } lt(i, 0x02) { i := add(i, 1) }\n                {\n                    mstore(pos, mload(srcPtr))\n                    pos := add(pos, 0x20)\n                    srcPtr := add(srcPtr, 0x20)\n                }\n            }\n            function array_allocation_size_array_uint256_dyn(length) -> size\n            {\n                if gt(length, 0xffffffffffffffff)\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(0, 0x24)\n                }\n                size := add(shl(5, length), 0x20)\n            }\n            /// @src 4:3405:3620  \"function transferOwnership(address newOwner) public virtual onlyOwner {...\"\n            function fun_transferOwnership_inner(var_newOwner)\n            {\n                /// @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\"\n                let _1 := and(/** @src 4:3489:3511  \"newOwner == address(0)\" */ var_newOwner, /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ sub(shl(160, 1), 1))\n                /// @src 4:3485:3576  \"if (newOwner == address(0)) {...\"\n                if /** @src 4:3489:3511  \"newOwner == address(0)\" */ iszero(/** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ _1)\n                /// @src 4:3485:3576  \"if (newOwner == address(0)) {...\"\n                {\n                    /// @src 4:3534:3565  \"OwnableInvalidOwner(address(0))\"\n                    mstore(/** @src 4:3509:3510  \"0\" */ 0x00, /** @src 4:3534:3565  \"OwnableInvalidOwner(address(0))\" */ shl(224, 0x1e4fbdf7))\n                    /// @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\"\n                    mstore(/** @src 4:3534:3565  \"OwnableInvalidOwner(address(0))\" */ 4, /** @src 4:3509:3510  \"0\" */ 0x00)\n                    /// @src 4:3534:3565  \"OwnableInvalidOwner(address(0))\"\n                    revert(/** @src 4:3509:3510  \"0\" */ 0x00, /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 36)\n                }\n                let _2 := sload(/** @src 4:1280:1345  \"assembly {...\" */ 65173360639460082030725920392146925864023520599682862633725751242436743107328)\n                /// @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\"\n                sstore(/** @src 4:1280:1345  \"assembly {...\" */ 65173360639460082030725920392146925864023520599682862633725751242436743107328, /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ or(and(_2, shl(160, 0xffffffffffffffffffffffff)), _1))\n                /// @src 4:3975:4015  \"OwnershipTransferred(oldOwner, newOwner)\"\n                log3(/** @src 4:3509:3510  \"0\" */ 0x00, 0x00, /** @src 4:3975:4015  \"OwnershipTransferred(oldOwner, newOwner)\" */ 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ and(_2, sub(shl(160, 1), 1)), /** @src 4:3975:4015  \"OwnershipTransferred(oldOwner, newOwner)\" */ _1)\n            }\n            /// @ast-id 606 @src 4:2658:2820  \"function _checkOwner() internal view virtual {...\"\n            function fun_checkOwner()\n            {\n                /// @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\"\n                let cleaned := and(sload(/** @src 4:1280:1345  \"assembly {...\" */ 65173360639460082030725920392146925864023520599682862633725751242436743107328), /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ sub(shl(160, 1), 1))\n                /// @src 4:2713:2814  \"if (owner() != _msgSender()) {...\"\n                if /** @src 4:2717:2740  \"owner() != _msgSender()\" */ iszero(eq(/** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ cleaned, /** @src 6:966:976  \"msg.sender\" */ caller()))\n                /// @src 4:2713:2814  \"if (owner() != _msgSender()) {...\"\n                {\n                    /// @src 4:2763:2803  \"OwnableUnauthorizedAccount(_msgSender())\"\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 4:2763:2803  \"OwnableUnauthorizedAccount(_msgSender())\" */ shl(224, 0x118cdaa7))\n                    /// @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\"\n                    mstore(/** @src 4:2763:2803  \"OwnableUnauthorizedAccount(_msgSender())\" */ 4, /** @src 6:966:976  \"msg.sender\" */ caller())\n                    /// @src 4:2763:2803  \"OwnableUnauthorizedAccount(_msgSender())\"\n                    revert(/** @src -1:-1:-1 */ 0, /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 36)\n                }\n            }\n            /// @ast-id 854 @src 5:7084:7225  \"function _checkInitializing() internal view virtual {...\"\n            function fun_checkInitializing()\n            {\n                /// @src 5:7146:7219  \"if (!_isInitializing()) {...\"\n                if /** @src 5:7150:7168  \"!_isInitializing()\" */ iszero(/** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ and(shr(64, sload(/** @src 5:8837:8901  \"assembly {...\" */ 108904022758810753673719992590105913556127789646572562039383141376366747609600)), /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 0xff))\n                /// @src 5:7146:7219  \"if (!_isInitializing()) {...\"\n                {\n                    /// @src 5:7191:7208  \"NotInitializing()\"\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 5:7191:7208  \"NotInitializing()\" */ shl(227, 0x1afcd79f))\n                    revert(/** @src -1:-1:-1 */ 0, /** @src 5:7191:7208  \"NotInitializing()\" */ 4)\n                }\n            }\n            /// @ast-id 2657 @src 18:4625:5207  \"function verifyCallResultFromTarget(...\"\n            function fun_verifyCallResultFromTarget(var_target, var_success, var_returndata_mpos) -> var__mpos\n            {\n                /// @src 18:4769:4781  \"bytes memory\"\n                var__mpos := /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 96\n                /// @src 18:4793:5201  \"if (!success) {...\"\n                switch /** @src 18:4797:4805  \"!success\" */ iszero(var_success)\n                case /** @src 18:4793:5201  \"if (!success) {...\" */ 0 {\n                    /// @src 18:5045:5094  \"returndata.length == 0 && target.code.length == 0\"\n                    let expr := /** @src 18:5045:5067  \"returndata.length == 0\" */ iszero(/** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ mload(/** @src 18:5045:5062  \"returndata.length\" */ var_returndata_mpos))\n                    /// @src 18:5045:5094  \"returndata.length == 0 && target.code.length == 0\"\n                    if expr\n                    {\n                        expr := /** @src 18:5071:5094  \"target.code.length == 0\" */ iszero(/** @src 18:5071:5089  \"target.code.length\" */ extcodesize(var_target))\n                    }\n                    /// @src 18:5041:5160  \"if (returndata.length == 0 && target.code.length == 0) {...\"\n                    if expr\n                    {\n                        /// @src 18:5121:5145  \"AddressEmptyCode(target)\"\n                        mstore(/** @src 18:5066:5067  \"0\" */ 0x00, /** @src 18:5121:5145  \"AddressEmptyCode(target)\" */ shl(224, 0x9996b315))\n                        /// @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\"\n                        mstore(/** @src 18:5121:5145  \"AddressEmptyCode(target)\" */ 4, /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ and(var_target, sub(shl(160, 1), 1)))\n                        /// @src 18:5121:5145  \"AddressEmptyCode(target)\"\n                        revert(/** @src 18:5066:5067  \"0\" */ 0x00, /** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ 36)\n                    }\n                    /// @src 18:5173:5190  \"return returndata\"\n                    var__mpos := var_returndata_mpos\n                    leave\n                }\n                default /// @src 18:4793:5201  \"if (!success) {...\"\n                {\n                    /// @src 18:5870:6253  \"if (returndata.length > 0) {...\"\n                    switch /** @src 18:5874:5895  \"returndata.length > 0\" */ iszero(iszero(/** @src 41:775:4001  \"contract Verifier is OwnableUpgradeable, UUPSUpgradeable {...\" */ mload(/** @src 18:5874:5891  \"returndata.length\" */ var_returndata_mpos)))\n                    case /** @src 18:5870:6253  \"if (returndata.length > 0) {...\" */ 0 {\n                        /// @src 18:6225:6242  \"FailedInnerCall()\"\n                        mstore(/** @src 18:5894:5895  \"0\" */ 0x00, /** @src 18:6225:6242  \"FailedInnerCall()\" */ shl(225, 0x0a12f521))\n                        revert(/** @src 18:5894:5895  \"0\" */ 0x00, /** @src 18:6225:6242  \"FailedInnerCall()\" */ 4)\n                    }\n                    default /// @src 18:5870:6253  \"if (returndata.length > 0) {...\"\n                    {\n                        /// @src 18:6046:6188  \"assembly {...\"\n                        revert(add(32, var_returndata_mpos), mload(var_returndata_mpos))\n                    }\n                }\n            }\n        }\n        /// @use-src 40:\"node_modules/ether-email-auth/packages/contracts/src/utils/Groth16Verifier.sol\"\n        object \"Groth16Verifier_9369\" {\n            code {\n                {\n                    /// @src 40:831:22292  \"contract Groth16Verifier {...\"\n                    let _1 := memoryguard(0x80)\n                    mstore(64, _1)\n                    if callvalue() { revert(0, 0) }\n                    let _2 := datasize(\"Groth16Verifier_9369_deployed\")\n                    codecopy(_1, dataoffset(\"Groth16Verifier_9369_deployed\"), _2)\n                    return(_1, _2)\n                }\n            }\n            /// @use-src 40:\"node_modules/ether-email-auth/packages/contracts/src/utils/Groth16Verifier.sol\"\n            object \"Groth16Verifier_9369_deployed\" {\n                code {\n                    {\n                        /// @src 40:831:22292  \"contract Groth16Verifier {...\"\n                        mstore(64, 128)\n                        if iszero(lt(calldatasize(), 4))\n                        {\n                            if eq(0x8525a61d, shr(224, calldataload(0)))\n                            {\n                                if callvalue() { revert(0, 0) }\n                                if slt(add(calldatasize(), not(3)), 1344) { revert(0, 0) }\n                                let value0 := abi_decode_array_uint256_calldata_1730(calldatasize())\n                                if gt(196, calldatasize()) { revert(0, 0) }\n                                let value2 := abi_decode_array_uint256_calldata(calldatasize())\n                                if gt(1348, calldatasize()) { revert(0, 0) }\n                                /// @src 40:11347:11360  \"uint16 zksync\"\n                                let var_zksync := /** @src 40:831:22292  \"contract Groth16Verifier {...\" */ 0\n                                /// @src 40:11370:11583  \"if(block.chainid == 300) {...\"\n                                switch /** @src 40:11373:11393  \"block.chainid == 300\" */ eq(/** @src 40:11373:11386  \"block.chainid\" */ chainid(), /** @src 40:11390:11393  \"300\" */ 0x012c)\n                                case /** @src 40:11370:11583  \"if(block.chainid == 300) {...\" */ 0 {\n                                    /// @src 40:11454:11583  \"if(block.chainid == 324) {...\"\n                                    switch /** @src 40:11457:11477  \"block.chainid == 324\" */ eq(/** @src 40:11373:11386  \"block.chainid\" */ chainid(), /** @src 40:11474:11477  \"324\" */ 0x0144)\n                                    case /** @src 40:11454:11583  \"if(block.chainid == 324) {...\" */ 0 {\n                                        /// @src 40:11552:11562  \"zksync = 0\"\n                                        var_zksync := /** @src 40:831:22292  \"contract Groth16Verifier {...\" */ 0\n                                    }\n                                    default /// @src 40:11454:11583  \"if(block.chainid == 324) {...\"\n                                    {\n                                        /// @src 40:11493:11503  \"zksync = 1\"\n                                        var_zksync := /** @src 40:11502:11503  \"1\" */ 0x01\n                                    }\n                                }\n                                default /// @src 40:11370:11583  \"if(block.chainid == 300) {...\"\n                                {\n                                    /// @src 40:11409:11419  \"zksync = 2\"\n                                    var_zksync := /** @src 40:11418:11419  \"2\" */ 0x02\n                                }\n                                /// @src 40:11593:22282  \"assembly {...\"\n                                mstore(/** @src 40:831:22292  \"contract Groth16Verifier {...\" */ 64, /** @src 40:11593:22282  \"assembly {...\" */ 1024)\n                                usr$checkField(calldataload(/** @src 40:831:22292  \"contract Groth16Verifier {...\" */ 260))\n                                /// @src 40:11593:22282  \"assembly {...\"\n                                usr$checkField(calldataload(292))\n                                usr$checkField(calldataload(324))\n                                usr$checkField(calldataload(356))\n                                usr$checkField(calldataload(388))\n                                usr$checkField(calldataload(420))\n                                usr$checkField(calldataload(452))\n                                usr$checkField(calldataload(484))\n                                usr$checkField(calldataload(516))\n                                usr$checkField(calldataload(548))\n                                usr$checkField(calldataload(580))\n                                usr$checkField(calldataload(612))\n                                usr$checkField(calldataload(644))\n                                usr$checkField(calldataload(676))\n                                usr$checkField(calldataload(708))\n                                usr$checkField(calldataload(740))\n                                usr$checkField(calldataload(772))\n                                usr$checkField(calldataload(804))\n                                usr$checkField(calldataload(836))\n                                usr$checkField(calldataload(868))\n                                usr$checkField(calldataload(900))\n                                usr$checkField(calldataload(932))\n                                usr$checkField(calldataload(964))\n                                usr$checkField(calldataload(996))\n                                usr$checkField(calldataload(1028))\n                                usr$checkField(calldataload(1060))\n                                usr$checkField(calldataload(1092))\n                                usr$checkField(calldataload(1124))\n                                usr$checkField(calldataload(1156))\n                                usr$checkField(calldataload(1188))\n                                usr$checkField(calldataload(1220))\n                                usr$checkField(calldataload(1252))\n                                usr$checkField(calldataload(1284))\n                                usr$checkField(calldataload(1316))\n                                usr$checkField(calldataload(/** @src 40:831:22292  \"contract Groth16Verifier {...\" */ 1348))\n                                /// @src 40:11593:22282  \"assembly {...\"\n                                mstore(/** @src 40:831:22292  \"contract Groth16Verifier {...\" */ 0, /** @src 40:11593:22282  \"assembly {...\" */ usr$checkPairing(value0, value2, var_zksync))\n                                return(/** @src 40:831:22292  \"contract Groth16Verifier {...\" */ 0, /** @src 40:11593:22282  \"assembly {...\" */ 32)\n                            }\n                        }\n                        /// @src 40:831:22292  \"contract Groth16Verifier {...\"\n                        revert(0, 0)\n                    }\n                    function abi_decode_array_uint256_calldata_1730(end) -> arrayPos\n                    {\n                        arrayPos := 4\n                        if gt(68, end) { revert(0, 0) }\n                    }\n                    function abi_decode_array_uint256_calldata(end) -> arrayPos\n                    {\n                        arrayPos := 196\n                        if gt(260, end) { revert(0, 0) }\n                    }\n                    /// @src 40:11593:22282  \"assembly {...\"\n                    function usr$checkField(usr$v)\n                    {\n                        if iszero(lt(usr$v, 21888242871839275222246405745257275088696311157297823662689037894645226208583))\n                        {\n                            mstore(0, 0)\n                            return(0, 0x20)\n                        }\n                    }\n                    function usr$g1_mulAccC_1736(usr$pR, usr$s, usr$z)\n                    {\n                        let usr$success := /** @src -1:-1:-1 */ 0\n                        /// @src 40:11593:22282  \"assembly {...\"\n                        let usr$mIn := mload(0x40)\n                        mstore(usr$mIn, 1112924942971302135990579038492068551965379862222416146684206705079782572000)\n                        mstore(add(usr$mIn, 32), 6845816202276549205403237603547410855545803354942552863847676397548741086071)\n                        let _1 := add(usr$mIn, 0x40)\n                        mstore(_1, usr$s)\n                        switch usr$z\n                        case 1 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x2abe798291c05b054475bdeb017161737a6a1b4f, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        case 2 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x2abe798291c05b054475bdeb017161737a6a1b4f, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        default {\n                            usr$success := staticcall(add(gas(), not(1999)), 7, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        if iszero(usr$success)\n                        {\n                            mstore(/** @src -1:-1:-1 */ 0, 0)\n                            /// @src 40:11593:22282  \"assembly {...\"\n                            return(/** @src -1:-1:-1 */ 0, /** @src 40:11593:22282  \"assembly {...\" */ 32)\n                        }\n                        mstore(_1, mload(usr$pR))\n                        mstore(add(usr$mIn, 96), mload(add(usr$pR, 32)))\n                        switch usr$z\n                        case 1 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x4cc3aa31951fada114cbad54686e2a082df6c4fa, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        case 2 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x4cc3aa31951fada114cbad54686e2a082df6c4fa, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        default {\n                            usr$success := staticcall(add(gas(), not(1999)), 6, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        if iszero(usr$success)\n                        {\n                            mstore(/** @src -1:-1:-1 */ 0, 0)\n                            /// @src 40:11593:22282  \"assembly {...\"\n                            return(/** @src -1:-1:-1 */ 0, /** @src 40:11593:22282  \"assembly {...\" */ 32)\n                        }\n                    }\n                    function usr$g1_mulAccC_1737(usr$pR, usr$s, usr$z)\n                    {\n                        let usr$success := /** @src -1:-1:-1 */ 0\n                        /// @src 40:11593:22282  \"assembly {...\"\n                        let usr$mIn := mload(0x40)\n                        mstore(usr$mIn, 14146397086704743317768846126489596483634956428235300380826232977310804058751)\n                        mstore(add(usr$mIn, 32), 19618883007025739156467626277666586024401705866552606313791444982720962403992)\n                        let _1 := add(usr$mIn, 0x40)\n                        mstore(_1, usr$s)\n                        switch usr$z\n                        case 1 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x2abe798291c05b054475bdeb017161737a6a1b4f, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        case 2 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x2abe798291c05b054475bdeb017161737a6a1b4f, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        default {\n                            usr$success := staticcall(add(gas(), not(1999)), 7, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        if iszero(usr$success)\n                        {\n                            mstore(/** @src -1:-1:-1 */ 0, 0)\n                            /// @src 40:11593:22282  \"assembly {...\"\n                            return(/** @src -1:-1:-1 */ 0, /** @src 40:11593:22282  \"assembly {...\" */ 32)\n                        }\n                        mstore(_1, mload(usr$pR))\n                        mstore(add(usr$mIn, 96), mload(add(usr$pR, 32)))\n                        switch usr$z\n                        case 1 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x4cc3aa31951fada114cbad54686e2a082df6c4fa, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        case 2 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x4cc3aa31951fada114cbad54686e2a082df6c4fa, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        default {\n                            usr$success := staticcall(add(gas(), not(1999)), 6, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        if iszero(usr$success)\n                        {\n                            mstore(/** @src -1:-1:-1 */ 0, 0)\n                            /// @src 40:11593:22282  \"assembly {...\"\n                            return(/** @src -1:-1:-1 */ 0, /** @src 40:11593:22282  \"assembly {...\" */ 32)\n                        }\n                    }\n                    function usr$g1_mulAccC_1738(usr$pR, usr$s, usr$z)\n                    {\n                        let usr$success := /** @src -1:-1:-1 */ 0\n                        /// @src 40:11593:22282  \"assembly {...\"\n                        let usr$mIn := mload(0x40)\n                        mstore(usr$mIn, 3901572409202614942721645284047738923242593674037512752046910139604415193490)\n                        mstore(add(usr$mIn, 32), 20492449392704526941468738279820790768424887146903635663987211396806301809154)\n                        let _1 := add(usr$mIn, 0x40)\n                        mstore(_1, usr$s)\n                        switch usr$z\n                        case 1 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x2abe798291c05b054475bdeb017161737a6a1b4f, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        case 2 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x2abe798291c05b054475bdeb017161737a6a1b4f, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        default {\n                            usr$success := staticcall(add(gas(), not(1999)), 7, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        if iszero(usr$success)\n                        {\n                            mstore(/** @src -1:-1:-1 */ 0, 0)\n                            /// @src 40:11593:22282  \"assembly {...\"\n                            return(/** @src -1:-1:-1 */ 0, /** @src 40:11593:22282  \"assembly {...\" */ 32)\n                        }\n                        mstore(_1, mload(usr$pR))\n                        mstore(add(usr$mIn, 96), mload(add(usr$pR, 32)))\n                        switch usr$z\n                        case 1 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x4cc3aa31951fada114cbad54686e2a082df6c4fa, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        case 2 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x4cc3aa31951fada114cbad54686e2a082df6c4fa, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        default {\n                            usr$success := staticcall(add(gas(), not(1999)), 6, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        if iszero(usr$success)\n                        {\n                            mstore(/** @src -1:-1:-1 */ 0, 0)\n                            /// @src 40:11593:22282  \"assembly {...\"\n                            return(/** @src -1:-1:-1 */ 0, /** @src 40:11593:22282  \"assembly {...\" */ 32)\n                        }\n                    }\n                    function usr$g1_mulAccC_1739(usr$pR, usr$s, usr$z)\n                    {\n                        let usr$success := /** @src -1:-1:-1 */ 0\n                        /// @src 40:11593:22282  \"assembly {...\"\n                        let usr$mIn := mload(0x40)\n                        mstore(usr$mIn, 18540181064351079043471661082110994395960833330341135578479476830087776228683)\n                        mstore(add(usr$mIn, 32), 11176005255132390129621080493002450161350701375862520723126575901394028996036)\n                        let _1 := add(usr$mIn, 0x40)\n                        mstore(_1, usr$s)\n                        switch usr$z\n                        case 1 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x2abe798291c05b054475bdeb017161737a6a1b4f, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        case 2 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x2abe798291c05b054475bdeb017161737a6a1b4f, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        default {\n                            usr$success := staticcall(add(gas(), not(1999)), 7, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        if iszero(usr$success)\n                        {\n                            mstore(/** @src -1:-1:-1 */ 0, 0)\n                            /// @src 40:11593:22282  \"assembly {...\"\n                            return(/** @src -1:-1:-1 */ 0, /** @src 40:11593:22282  \"assembly {...\" */ 32)\n                        }\n                        mstore(_1, mload(usr$pR))\n                        mstore(add(usr$mIn, 96), mload(add(usr$pR, 32)))\n                        switch usr$z\n                        case 1 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x4cc3aa31951fada114cbad54686e2a082df6c4fa, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        case 2 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x4cc3aa31951fada114cbad54686e2a082df6c4fa, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        default {\n                            usr$success := staticcall(add(gas(), not(1999)), 6, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        if iszero(usr$success)\n                        {\n                            mstore(/** @src -1:-1:-1 */ 0, 0)\n                            /// @src 40:11593:22282  \"assembly {...\"\n                            return(/** @src -1:-1:-1 */ 0, /** @src 40:11593:22282  \"assembly {...\" */ 32)\n                        }\n                    }\n                    function usr$g1_mulAccC_1740(usr$pR, usr$s, usr$z)\n                    {\n                        let usr$success := /** @src -1:-1:-1 */ 0\n                        /// @src 40:11593:22282  \"assembly {...\"\n                        let usr$mIn := mload(0x40)\n                        mstore(usr$mIn, 19561918792572579721654605669351975749853953476158354443105355794367963998057)\n                        mstore(add(usr$mIn, 32), 8218678694141104830016990002861269810060858478661593498963178088127632633272)\n                        let _1 := add(usr$mIn, 0x40)\n                        mstore(_1, usr$s)\n                        switch usr$z\n                        case 1 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x2abe798291c05b054475bdeb017161737a6a1b4f, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        case 2 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x2abe798291c05b054475bdeb017161737a6a1b4f, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        default {\n                            usr$success := staticcall(add(gas(), not(1999)), 7, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        if iszero(usr$success)\n                        {\n                            mstore(/** @src -1:-1:-1 */ 0, 0)\n                            /// @src 40:11593:22282  \"assembly {...\"\n                            return(/** @src -1:-1:-1 */ 0, /** @src 40:11593:22282  \"assembly {...\" */ 32)\n                        }\n                        mstore(_1, mload(usr$pR))\n                        mstore(add(usr$mIn, 96), mload(add(usr$pR, 32)))\n                        switch usr$z\n                        case 1 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x4cc3aa31951fada114cbad54686e2a082df6c4fa, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        case 2 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x4cc3aa31951fada114cbad54686e2a082df6c4fa, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        default {\n                            usr$success := staticcall(add(gas(), not(1999)), 6, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        if iszero(usr$success)\n                        {\n                            mstore(/** @src -1:-1:-1 */ 0, 0)\n                            /// @src 40:11593:22282  \"assembly {...\"\n                            return(/** @src -1:-1:-1 */ 0, /** @src 40:11593:22282  \"assembly {...\" */ 32)\n                        }\n                    }\n                    function usr$g1_mulAccC_1741(usr$pR, usr$s, usr$z)\n                    {\n                        let usr$success := /** @src -1:-1:-1 */ 0\n                        /// @src 40:11593:22282  \"assembly {...\"\n                        let usr$mIn := mload(0x40)\n                        mstore(usr$mIn, 9430924798221081020093287735191121193795036835461664479209198319741867653703)\n                        mstore(add(usr$mIn, 32), 8320455794218847878770580093897658145962468495286236900439725456006531945699)\n                        let _1 := add(usr$mIn, 0x40)\n                        mstore(_1, usr$s)\n                        switch usr$z\n                        case 1 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x2abe798291c05b054475bdeb017161737a6a1b4f, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        case 2 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x2abe798291c05b054475bdeb017161737a6a1b4f, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        default {\n                            usr$success := staticcall(add(gas(), not(1999)), 7, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        if iszero(usr$success)\n                        {\n                            mstore(/** @src -1:-1:-1 */ 0, 0)\n                            /// @src 40:11593:22282  \"assembly {...\"\n                            return(/** @src -1:-1:-1 */ 0, /** @src 40:11593:22282  \"assembly {...\" */ 32)\n                        }\n                        mstore(_1, mload(usr$pR))\n                        mstore(add(usr$mIn, 96), mload(add(usr$pR, 32)))\n                        switch usr$z\n                        case 1 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x4cc3aa31951fada114cbad54686e2a082df6c4fa, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        case 2 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x4cc3aa31951fada114cbad54686e2a082df6c4fa, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        default {\n                            usr$success := staticcall(add(gas(), not(1999)), 6, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        if iszero(usr$success)\n                        {\n                            mstore(/** @src -1:-1:-1 */ 0, 0)\n                            /// @src 40:11593:22282  \"assembly {...\"\n                            return(/** @src -1:-1:-1 */ 0, /** @src 40:11593:22282  \"assembly {...\" */ 32)\n                        }\n                    }\n                    function usr$g1_mulAccC_1742(usr$pR, usr$s, usr$z)\n                    {\n                        let usr$success := /** @src -1:-1:-1 */ 0\n                        /// @src 40:11593:22282  \"assembly {...\"\n                        let usr$mIn := mload(0x40)\n                        mstore(usr$mIn, 5026847283727041400632489144741052290976729570767028644525050581059876916251)\n                        mstore(add(usr$mIn, 32), 18709603090338372683001965035561848282369713676288357172691730209331905334650)\n                        let _1 := add(usr$mIn, 0x40)\n                        mstore(_1, usr$s)\n                        switch usr$z\n                        case 1 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x2abe798291c05b054475bdeb017161737a6a1b4f, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        case 2 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x2abe798291c05b054475bdeb017161737a6a1b4f, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        default {\n                            usr$success := staticcall(add(gas(), not(1999)), 7, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        if iszero(usr$success)\n                        {\n                            mstore(/** @src -1:-1:-1 */ 0, 0)\n                            /// @src 40:11593:22282  \"assembly {...\"\n                            return(/** @src -1:-1:-1 */ 0, /** @src 40:11593:22282  \"assembly {...\" */ 32)\n                        }\n                        mstore(_1, mload(usr$pR))\n                        mstore(add(usr$mIn, 96), mload(add(usr$pR, 32)))\n                        switch usr$z\n                        case 1 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x4cc3aa31951fada114cbad54686e2a082df6c4fa, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        case 2 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x4cc3aa31951fada114cbad54686e2a082df6c4fa, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        default {\n                            usr$success := staticcall(add(gas(), not(1999)), 6, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        if iszero(usr$success)\n                        {\n                            mstore(/** @src -1:-1:-1 */ 0, 0)\n                            /// @src 40:11593:22282  \"assembly {...\"\n                            return(/** @src -1:-1:-1 */ 0, /** @src 40:11593:22282  \"assembly {...\" */ 32)\n                        }\n                    }\n                    function usr$g1_mulAccC_1743(usr$pR, usr$s, usr$z)\n                    {\n                        let usr$success := /** @src -1:-1:-1 */ 0\n                        /// @src 40:11593:22282  \"assembly {...\"\n                        let usr$mIn := mload(0x40)\n                        mstore(usr$mIn, 17783950150020738154914534833285662833687830065154708170534593149023190841571)\n                        mstore(add(usr$mIn, 32), 6711670108831861054349992265875143708175087706665287716580642850559233815182)\n                        let _1 := add(usr$mIn, 0x40)\n                        mstore(_1, usr$s)\n                        switch usr$z\n                        case 1 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x2abe798291c05b054475bdeb017161737a6a1b4f, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        case 2 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x2abe798291c05b054475bdeb017161737a6a1b4f, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        default {\n                            usr$success := staticcall(add(gas(), not(1999)), 7, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        if iszero(usr$success)\n                        {\n                            mstore(/** @src -1:-1:-1 */ 0, 0)\n                            /// @src 40:11593:22282  \"assembly {...\"\n                            return(/** @src -1:-1:-1 */ 0, /** @src 40:11593:22282  \"assembly {...\" */ 32)\n                        }\n                        mstore(_1, mload(usr$pR))\n                        mstore(add(usr$mIn, 96), mload(add(usr$pR, 32)))\n                        switch usr$z\n                        case 1 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x4cc3aa31951fada114cbad54686e2a082df6c4fa, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        case 2 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x4cc3aa31951fada114cbad54686e2a082df6c4fa, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        default {\n                            usr$success := staticcall(add(gas(), not(1999)), 6, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        if iszero(usr$success)\n                        {\n                            mstore(/** @src -1:-1:-1 */ 0, 0)\n                            /// @src 40:11593:22282  \"assembly {...\"\n                            return(/** @src -1:-1:-1 */ 0, /** @src 40:11593:22282  \"assembly {...\" */ 32)\n                        }\n                    }\n                    function usr$g1_mulAccC_1744(usr$pR, usr$s, usr$z)\n                    {\n                        let usr$success := /** @src -1:-1:-1 */ 0\n                        /// @src 40:11593:22282  \"assembly {...\"\n                        let usr$mIn := mload(0x40)\n                        mstore(usr$mIn, 6456809683101221239825536925658971026995917443342977471616457395354933010826)\n                        mstore(add(usr$mIn, 32), 2014292748365982904981992383163603273504856743882959093701478470668783800522)\n                        let _1 := add(usr$mIn, 0x40)\n                        mstore(_1, usr$s)\n                        switch usr$z\n                        case 1 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x2abe798291c05b054475bdeb017161737a6a1b4f, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        case 2 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x2abe798291c05b054475bdeb017161737a6a1b4f, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        default {\n                            usr$success := staticcall(add(gas(), not(1999)), 7, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        if iszero(usr$success)\n                        {\n                            mstore(/** @src -1:-1:-1 */ 0, 0)\n                            /// @src 40:11593:22282  \"assembly {...\"\n                            return(/** @src -1:-1:-1 */ 0, /** @src 40:11593:22282  \"assembly {...\" */ 32)\n                        }\n                        mstore(_1, mload(usr$pR))\n                        mstore(add(usr$mIn, 96), mload(add(usr$pR, 32)))\n                        switch usr$z\n                        case 1 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x4cc3aa31951fada114cbad54686e2a082df6c4fa, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        case 2 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x4cc3aa31951fada114cbad54686e2a082df6c4fa, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        default {\n                            usr$success := staticcall(add(gas(), not(1999)), 6, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        if iszero(usr$success)\n                        {\n                            mstore(/** @src -1:-1:-1 */ 0, 0)\n                            /// @src 40:11593:22282  \"assembly {...\"\n                            return(/** @src -1:-1:-1 */ 0, /** @src 40:11593:22282  \"assembly {...\" */ 32)\n                        }\n                    }\n                    function usr$g1_mulAccC_1745(usr$pR, usr$s, usr$z)\n                    {\n                        let usr$success := /** @src -1:-1:-1 */ 0\n                        /// @src 40:11593:22282  \"assembly {...\"\n                        let usr$mIn := mload(0x40)\n                        mstore(usr$mIn, 6628245325000975286546535223213930648454767286000819266622720989919128655736)\n                        mstore(add(usr$mIn, 32), 14513751619334179776611945559238333965209884013883320491822197554011245102668)\n                        let _1 := add(usr$mIn, 0x40)\n                        mstore(_1, usr$s)\n                        switch usr$z\n                        case 1 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x2abe798291c05b054475bdeb017161737a6a1b4f, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        case 2 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x2abe798291c05b054475bdeb017161737a6a1b4f, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        default {\n                            usr$success := staticcall(add(gas(), not(1999)), 7, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        if iszero(usr$success)\n                        {\n                            mstore(/** @src -1:-1:-1 */ 0, 0)\n                            /// @src 40:11593:22282  \"assembly {...\"\n                            return(/** @src -1:-1:-1 */ 0, /** @src 40:11593:22282  \"assembly {...\" */ 32)\n                        }\n                        mstore(_1, mload(usr$pR))\n                        mstore(add(usr$mIn, 96), mload(add(usr$pR, 32)))\n                        switch usr$z\n                        case 1 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x4cc3aa31951fada114cbad54686e2a082df6c4fa, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        case 2 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x4cc3aa31951fada114cbad54686e2a082df6c4fa, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        default {\n                            usr$success := staticcall(add(gas(), not(1999)), 6, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        if iszero(usr$success)\n                        {\n                            mstore(/** @src -1:-1:-1 */ 0, 0)\n                            /// @src 40:11593:22282  \"assembly {...\"\n                            return(/** @src -1:-1:-1 */ 0, /** @src 40:11593:22282  \"assembly {...\" */ 32)\n                        }\n                    }\n                    function usr$g1_mulAccC_1746(usr$pR, usr$s, usr$z)\n                    {\n                        let usr$success := /** @src -1:-1:-1 */ 0\n                        /// @src 40:11593:22282  \"assembly {...\"\n                        let usr$mIn := mload(0x40)\n                        mstore(usr$mIn, 18570424159211943648550772570282559547250130191621494465657111355378707354500)\n                        mstore(add(usr$mIn, 32), 3142881938352899028782850032628554749777583832256141371247984173352247988131)\n                        let _1 := add(usr$mIn, 0x40)\n                        mstore(_1, usr$s)\n                        switch usr$z\n                        case 1 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x2abe798291c05b054475bdeb017161737a6a1b4f, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        case 2 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x2abe798291c05b054475bdeb017161737a6a1b4f, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        default {\n                            usr$success := staticcall(add(gas(), not(1999)), 7, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        if iszero(usr$success)\n                        {\n                            mstore(/** @src -1:-1:-1 */ 0, 0)\n                            /// @src 40:11593:22282  \"assembly {...\"\n                            return(/** @src -1:-1:-1 */ 0, /** @src 40:11593:22282  \"assembly {...\" */ 32)\n                        }\n                        mstore(_1, mload(usr$pR))\n                        mstore(add(usr$mIn, 96), mload(add(usr$pR, 32)))\n                        switch usr$z\n                        case 1 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x4cc3aa31951fada114cbad54686e2a082df6c4fa, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        case 2 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x4cc3aa31951fada114cbad54686e2a082df6c4fa, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        default {\n                            usr$success := staticcall(add(gas(), not(1999)), 6, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        if iszero(usr$success)\n                        {\n                            mstore(/** @src -1:-1:-1 */ 0, 0)\n                            /// @src 40:11593:22282  \"assembly {...\"\n                            return(/** @src -1:-1:-1 */ 0, /** @src 40:11593:22282  \"assembly {...\" */ 32)\n                        }\n                    }\n                    function usr$g1_mulAccC_1747(usr$pR, usr$s, usr$z)\n                    {\n                        let usr$success := /** @src -1:-1:-1 */ 0\n                        /// @src 40:11593:22282  \"assembly {...\"\n                        let usr$mIn := mload(0x40)\n                        mstore(usr$mIn, 5223991002378260090449510454796281831282905631623677469960113091483024319301)\n                        mstore(add(usr$mIn, 32), 9427018011817145184335218137442223127741016816822775509206816206494077869941)\n                        let _1 := add(usr$mIn, 0x40)\n                        mstore(_1, usr$s)\n                        switch usr$z\n                        case 1 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x2abe798291c05b054475bdeb017161737a6a1b4f, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        case 2 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x2abe798291c05b054475bdeb017161737a6a1b4f, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        default {\n                            usr$success := staticcall(add(gas(), not(1999)), 7, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        if iszero(usr$success)\n                        {\n                            mstore(/** @src -1:-1:-1 */ 0, 0)\n                            /// @src 40:11593:22282  \"assembly {...\"\n                            return(/** @src -1:-1:-1 */ 0, /** @src 40:11593:22282  \"assembly {...\" */ 32)\n                        }\n                        mstore(_1, mload(usr$pR))\n                        mstore(add(usr$mIn, 96), mload(add(usr$pR, 32)))\n                        switch usr$z\n                        case 1 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x4cc3aa31951fada114cbad54686e2a082df6c4fa, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        case 2 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x4cc3aa31951fada114cbad54686e2a082df6c4fa, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        default {\n                            usr$success := staticcall(add(gas(), not(1999)), 6, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        if iszero(usr$success)\n                        {\n                            mstore(/** @src -1:-1:-1 */ 0, 0)\n                            /// @src 40:11593:22282  \"assembly {...\"\n                            return(/** @src -1:-1:-1 */ 0, /** @src 40:11593:22282  \"assembly {...\" */ 32)\n                        }\n                    }\n                    function usr$g1_mulAccC_1748(usr$pR, usr$s, usr$z)\n                    {\n                        let usr$success := /** @src -1:-1:-1 */ 0\n                        /// @src 40:11593:22282  \"assembly {...\"\n                        let usr$mIn := mload(0x40)\n                        mstore(usr$mIn, 17733384847564503082934979078550596341075160377145956961996412508907155849602)\n                        mstore(add(usr$mIn, 32), 15345500273986785785979010183753446192836470842052033037545791683924216389909)\n                        let _1 := add(usr$mIn, 0x40)\n                        mstore(_1, usr$s)\n                        switch usr$z\n                        case 1 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x2abe798291c05b054475bdeb017161737a6a1b4f, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        case 2 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x2abe798291c05b054475bdeb017161737a6a1b4f, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        default {\n                            usr$success := staticcall(add(gas(), not(1999)), 7, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        if iszero(usr$success)\n                        {\n                            mstore(/** @src -1:-1:-1 */ 0, 0)\n                            /// @src 40:11593:22282  \"assembly {...\"\n                            return(/** @src -1:-1:-1 */ 0, /** @src 40:11593:22282  \"assembly {...\" */ 32)\n                        }\n                        mstore(_1, mload(usr$pR))\n                        mstore(add(usr$mIn, 96), mload(add(usr$pR, 32)))\n                        switch usr$z\n                        case 1 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x4cc3aa31951fada114cbad54686e2a082df6c4fa, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        case 2 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x4cc3aa31951fada114cbad54686e2a082df6c4fa, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        default {\n                            usr$success := staticcall(add(gas(), not(1999)), 6, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        if iszero(usr$success)\n                        {\n                            mstore(/** @src -1:-1:-1 */ 0, 0)\n                            /// @src 40:11593:22282  \"assembly {...\"\n                            return(/** @src -1:-1:-1 */ 0, /** @src 40:11593:22282  \"assembly {...\" */ 32)\n                        }\n                    }\n                    function usr$g1_mulAccC_1749(usr$pR, usr$s, usr$z)\n                    {\n                        let usr$success := /** @src -1:-1:-1 */ 0\n                        /// @src 40:11593:22282  \"assembly {...\"\n                        let usr$mIn := mload(0x40)\n                        mstore(usr$mIn, 6541603162653988673614876540286498610416711433782997011446804048984497507717)\n                        mstore(add(usr$mIn, 32), 9471585496716317833911101487553454694761435169521054429602533117895220539092)\n                        let _1 := add(usr$mIn, 0x40)\n                        mstore(_1, usr$s)\n                        switch usr$z\n                        case 1 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x2abe798291c05b054475bdeb017161737a6a1b4f, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        case 2 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x2abe798291c05b054475bdeb017161737a6a1b4f, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        default {\n                            usr$success := staticcall(add(gas(), not(1999)), 7, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        if iszero(usr$success)\n                        {\n                            mstore(/** @src -1:-1:-1 */ 0, 0)\n                            /// @src 40:11593:22282  \"assembly {...\"\n                            return(/** @src -1:-1:-1 */ 0, /** @src 40:11593:22282  \"assembly {...\" */ 32)\n                        }\n                        mstore(_1, mload(usr$pR))\n                        mstore(add(usr$mIn, 96), mload(add(usr$pR, 32)))\n                        switch usr$z\n                        case 1 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x4cc3aa31951fada114cbad54686e2a082df6c4fa, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        case 2 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x4cc3aa31951fada114cbad54686e2a082df6c4fa, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        default {\n                            usr$success := staticcall(add(gas(), not(1999)), 6, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        if iszero(usr$success)\n                        {\n                            mstore(/** @src -1:-1:-1 */ 0, 0)\n                            /// @src 40:11593:22282  \"assembly {...\"\n                            return(/** @src -1:-1:-1 */ 0, /** @src 40:11593:22282  \"assembly {...\" */ 32)\n                        }\n                    }\n                    function usr$g1_mulAccC_1750(usr$pR, usr$s, usr$z)\n                    {\n                        let usr$success := /** @src -1:-1:-1 */ 0\n                        /// @src 40:11593:22282  \"assembly {...\"\n                        let usr$mIn := mload(0x40)\n                        mstore(usr$mIn, 6574110840837190171512762164893486105535576711656029901056739039814628526912)\n                        mstore(add(usr$mIn, 32), 12107221022070295505274408663667253928323650746131661962928553805430682213730)\n                        let _1 := add(usr$mIn, 0x40)\n                        mstore(_1, usr$s)\n                        switch usr$z\n                        case 1 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x2abe798291c05b054475bdeb017161737a6a1b4f, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        case 2 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x2abe798291c05b054475bdeb017161737a6a1b4f, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        default {\n                            usr$success := staticcall(add(gas(), not(1999)), 7, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        if iszero(usr$success)\n                        {\n                            mstore(/** @src -1:-1:-1 */ 0, 0)\n                            /// @src 40:11593:22282  \"assembly {...\"\n                            return(/** @src -1:-1:-1 */ 0, /** @src 40:11593:22282  \"assembly {...\" */ 32)\n                        }\n                        mstore(_1, mload(usr$pR))\n                        mstore(add(usr$mIn, 96), mload(add(usr$pR, 32)))\n                        switch usr$z\n                        case 1 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x4cc3aa31951fada114cbad54686e2a082df6c4fa, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        case 2 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x4cc3aa31951fada114cbad54686e2a082df6c4fa, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        default {\n                            usr$success := staticcall(add(gas(), not(1999)), 6, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        if iszero(usr$success)\n                        {\n                            mstore(/** @src -1:-1:-1 */ 0, 0)\n                            /// @src 40:11593:22282  \"assembly {...\"\n                            return(/** @src -1:-1:-1 */ 0, /** @src 40:11593:22282  \"assembly {...\" */ 32)\n                        }\n                    }\n                    function usr$g1_mulAccC_1751(usr$pR, usr$s, usr$z)\n                    {\n                        let usr$success := /** @src -1:-1:-1 */ 0\n                        /// @src 40:11593:22282  \"assembly {...\"\n                        let usr$mIn := mload(0x40)\n                        mstore(usr$mIn, 2983775925467162306639671044788352921278318217335490557023737802970494396161)\n                        mstore(add(usr$mIn, 32), 15155657642358487296835454918514213311356981076876734700573166757257484354564)\n                        let _1 := add(usr$mIn, 0x40)\n                        mstore(_1, usr$s)\n                        switch usr$z\n                        case 1 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x2abe798291c05b054475bdeb017161737a6a1b4f, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        case 2 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x2abe798291c05b054475bdeb017161737a6a1b4f, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        default {\n                            usr$success := staticcall(add(gas(), not(1999)), 7, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        if iszero(usr$success)\n                        {\n                            mstore(/** @src -1:-1:-1 */ 0, 0)\n                            /// @src 40:11593:22282  \"assembly {...\"\n                            return(/** @src -1:-1:-1 */ 0, /** @src 40:11593:22282  \"assembly {...\" */ 32)\n                        }\n                        mstore(_1, mload(usr$pR))\n                        mstore(add(usr$mIn, 96), mload(add(usr$pR, 32)))\n                        switch usr$z\n                        case 1 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x4cc3aa31951fada114cbad54686e2a082df6c4fa, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        case 2 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x4cc3aa31951fada114cbad54686e2a082df6c4fa, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        default {\n                            usr$success := staticcall(add(gas(), not(1999)), 6, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        if iszero(usr$success)\n                        {\n                            mstore(/** @src -1:-1:-1 */ 0, 0)\n                            /// @src 40:11593:22282  \"assembly {...\"\n                            return(/** @src -1:-1:-1 */ 0, /** @src 40:11593:22282  \"assembly {...\" */ 32)\n                        }\n                    }\n                    function usr$g1_mulAccC_1752(usr$pR, usr$s, usr$z)\n                    {\n                        let usr$success := /** @src -1:-1:-1 */ 0\n                        /// @src 40:11593:22282  \"assembly {...\"\n                        let usr$mIn := mload(0x40)\n                        mstore(usr$mIn, 8967042914633055089306636825844718647849951037719728238537295360572488150548)\n                        mstore(add(usr$mIn, 32), 16316365584620447093615538375124020157614277415345119540410103156547686499616)\n                        let _1 := add(usr$mIn, 0x40)\n                        mstore(_1, usr$s)\n                        switch usr$z\n                        case 1 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x2abe798291c05b054475bdeb017161737a6a1b4f, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        case 2 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x2abe798291c05b054475bdeb017161737a6a1b4f, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        default {\n                            usr$success := staticcall(add(gas(), not(1999)), 7, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        if iszero(usr$success)\n                        {\n                            mstore(/** @src -1:-1:-1 */ 0, 0)\n                            /// @src 40:11593:22282  \"assembly {...\"\n                            return(/** @src -1:-1:-1 */ 0, /** @src 40:11593:22282  \"assembly {...\" */ 32)\n                        }\n                        mstore(_1, mload(usr$pR))\n                        mstore(add(usr$mIn, 96), mload(add(usr$pR, 32)))\n                        switch usr$z\n                        case 1 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x4cc3aa31951fada114cbad54686e2a082df6c4fa, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        case 2 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x4cc3aa31951fada114cbad54686e2a082df6c4fa, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        default {\n                            usr$success := staticcall(add(gas(), not(1999)), 6, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        if iszero(usr$success)\n                        {\n                            mstore(/** @src -1:-1:-1 */ 0, 0)\n                            /// @src 40:11593:22282  \"assembly {...\"\n                            return(/** @src -1:-1:-1 */ 0, /** @src 40:11593:22282  \"assembly {...\" */ 32)\n                        }\n                    }\n                    function usr$g1_mulAccC_1753(usr$pR, usr$s, usr$z)\n                    {\n                        let usr$success := /** @src -1:-1:-1 */ 0\n                        /// @src 40:11593:22282  \"assembly {...\"\n                        let usr$mIn := mload(0x40)\n                        mstore(usr$mIn, 10539075382040152021577786214341262536565753081943101851679620745620126843721)\n                        mstore(add(usr$mIn, 32), 4734602432159888257161632785059762380496749946015675717019228118945872853040)\n                        let _1 := add(usr$mIn, 0x40)\n                        mstore(_1, usr$s)\n                        switch usr$z\n                        case 1 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x2abe798291c05b054475bdeb017161737a6a1b4f, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        case 2 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x2abe798291c05b054475bdeb017161737a6a1b4f, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        default {\n                            usr$success := staticcall(add(gas(), not(1999)), 7, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        if iszero(usr$success)\n                        {\n                            mstore(/** @src -1:-1:-1 */ 0, 0)\n                            /// @src 40:11593:22282  \"assembly {...\"\n                            return(/** @src -1:-1:-1 */ 0, /** @src 40:11593:22282  \"assembly {...\" */ 32)\n                        }\n                        mstore(_1, mload(usr$pR))\n                        mstore(add(usr$mIn, 96), mload(add(usr$pR, 32)))\n                        switch usr$z\n                        case 1 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x4cc3aa31951fada114cbad54686e2a082df6c4fa, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        case 2 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x4cc3aa31951fada114cbad54686e2a082df6c4fa, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        default {\n                            usr$success := staticcall(add(gas(), not(1999)), 6, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        if iszero(usr$success)\n                        {\n                            mstore(/** @src -1:-1:-1 */ 0, 0)\n                            /// @src 40:11593:22282  \"assembly {...\"\n                            return(/** @src -1:-1:-1 */ 0, /** @src 40:11593:22282  \"assembly {...\" */ 32)\n                        }\n                    }\n                    function usr$g1_mulAccC_1754(usr$pR, usr$s, usr$z)\n                    {\n                        let usr$success := /** @src -1:-1:-1 */ 0\n                        /// @src 40:11593:22282  \"assembly {...\"\n                        let usr$mIn := mload(0x40)\n                        mstore(usr$mIn, 16904274081002162388173688128412241495718571792446724759784404749590000812400)\n                        mstore(add(usr$mIn, 32), 10801084318813806801902242112307629808119029411792686266329164737317751231217)\n                        let _1 := add(usr$mIn, 0x40)\n                        mstore(_1, usr$s)\n                        switch usr$z\n                        case 1 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x2abe798291c05b054475bdeb017161737a6a1b4f, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        case 2 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x2abe798291c05b054475bdeb017161737a6a1b4f, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        default {\n                            usr$success := staticcall(add(gas(), not(1999)), 7, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        if iszero(usr$success)\n                        {\n                            mstore(/** @src -1:-1:-1 */ 0, 0)\n                            /// @src 40:11593:22282  \"assembly {...\"\n                            return(/** @src -1:-1:-1 */ 0, /** @src 40:11593:22282  \"assembly {...\" */ 32)\n                        }\n                        mstore(_1, mload(usr$pR))\n                        mstore(add(usr$mIn, 96), mload(add(usr$pR, 32)))\n                        switch usr$z\n                        case 1 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x4cc3aa31951fada114cbad54686e2a082df6c4fa, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        case 2 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x4cc3aa31951fada114cbad54686e2a082df6c4fa, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        default {\n                            usr$success := staticcall(add(gas(), not(1999)), 6, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        if iszero(usr$success)\n                        {\n                            mstore(/** @src -1:-1:-1 */ 0, 0)\n                            /// @src 40:11593:22282  \"assembly {...\"\n                            return(/** @src -1:-1:-1 */ 0, /** @src 40:11593:22282  \"assembly {...\" */ 32)\n                        }\n                    }\n                    function usr$g1_mulAccC_1755(usr$pR, usr$s, usr$z)\n                    {\n                        let usr$success := /** @src -1:-1:-1 */ 0\n                        /// @src 40:11593:22282  \"assembly {...\"\n                        let usr$mIn := mload(0x40)\n                        mstore(usr$mIn, 15575787937775277998941372228242544347460724933647624890935023166333401850163)\n                        mstore(add(usr$mIn, 32), 7296638718677056910701470329118855562874930285186351569007798599358833717218)\n                        let _1 := add(usr$mIn, 0x40)\n                        mstore(_1, usr$s)\n                        switch usr$z\n                        case 1 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x2abe798291c05b054475bdeb017161737a6a1b4f, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        case 2 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x2abe798291c05b054475bdeb017161737a6a1b4f, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        default {\n                            usr$success := staticcall(add(gas(), not(1999)), 7, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        if iszero(usr$success)\n                        {\n                            mstore(/** @src -1:-1:-1 */ 0, 0)\n                            /// @src 40:11593:22282  \"assembly {...\"\n                            return(/** @src -1:-1:-1 */ 0, /** @src 40:11593:22282  \"assembly {...\" */ 32)\n                        }\n                        mstore(_1, mload(usr$pR))\n                        mstore(add(usr$mIn, 96), mload(add(usr$pR, 32)))\n                        switch usr$z\n                        case 1 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x4cc3aa31951fada114cbad54686e2a082df6c4fa, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        case 2 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x4cc3aa31951fada114cbad54686e2a082df6c4fa, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        default {\n                            usr$success := staticcall(add(gas(), not(1999)), 6, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        if iszero(usr$success)\n                        {\n                            mstore(/** @src -1:-1:-1 */ 0, 0)\n                            /// @src 40:11593:22282  \"assembly {...\"\n                            return(/** @src -1:-1:-1 */ 0, /** @src 40:11593:22282  \"assembly {...\" */ 32)\n                        }\n                    }\n                    function usr$g1_mulAccC_1756(usr$pR, usr$s, usr$z)\n                    {\n                        let usr$success := /** @src -1:-1:-1 */ 0\n                        /// @src 40:11593:22282  \"assembly {...\"\n                        let usr$mIn := mload(0x40)\n                        mstore(usr$mIn, 4551313941391400232712859196059035637265126775160423752556164701565012171961)\n                        mstore(add(usr$mIn, 32), 21401656423982733211718420214626338184514587667446979844631973864641456629261)\n                        let _1 := add(usr$mIn, 0x40)\n                        mstore(_1, usr$s)\n                        switch usr$z\n                        case 1 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x2abe798291c05b054475bdeb017161737a6a1b4f, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        case 2 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x2abe798291c05b054475bdeb017161737a6a1b4f, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        default {\n                            usr$success := staticcall(add(gas(), not(1999)), 7, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        if iszero(usr$success)\n                        {\n                            mstore(/** @src -1:-1:-1 */ 0, 0)\n                            /// @src 40:11593:22282  \"assembly {...\"\n                            return(/** @src -1:-1:-1 */ 0, /** @src 40:11593:22282  \"assembly {...\" */ 32)\n                        }\n                        mstore(_1, mload(usr$pR))\n                        mstore(add(usr$mIn, 96), mload(add(usr$pR, 32)))\n                        switch usr$z\n                        case 1 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x4cc3aa31951fada114cbad54686e2a082df6c4fa, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        case 2 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x4cc3aa31951fada114cbad54686e2a082df6c4fa, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        default {\n                            usr$success := staticcall(add(gas(), not(1999)), 6, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        if iszero(usr$success)\n                        {\n                            mstore(/** @src -1:-1:-1 */ 0, 0)\n                            /// @src 40:11593:22282  \"assembly {...\"\n                            return(/** @src -1:-1:-1 */ 0, /** @src 40:11593:22282  \"assembly {...\" */ 32)\n                        }\n                    }\n                    function usr$g1_mulAccC_1757(usr$pR, usr$s, usr$z)\n                    {\n                        let usr$success := /** @src -1:-1:-1 */ 0\n                        /// @src 40:11593:22282  \"assembly {...\"\n                        let usr$mIn := mload(0x40)\n                        mstore(usr$mIn, 2935540066773152386094450378156329519379475479888931777862603161088003692041)\n                        mstore(add(usr$mIn, 32), 3754706265995206762948051647660125270465347882441656302776943004798594006627)\n                        let _1 := add(usr$mIn, 0x40)\n                        mstore(_1, usr$s)\n                        switch usr$z\n                        case 1 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x2abe798291c05b054475bdeb017161737a6a1b4f, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        case 2 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x2abe798291c05b054475bdeb017161737a6a1b4f, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        default {\n                            usr$success := staticcall(add(gas(), not(1999)), 7, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        if iszero(usr$success)\n                        {\n                            mstore(/** @src -1:-1:-1 */ 0, 0)\n                            /// @src 40:11593:22282  \"assembly {...\"\n                            return(/** @src -1:-1:-1 */ 0, /** @src 40:11593:22282  \"assembly {...\" */ 32)\n                        }\n                        mstore(_1, mload(usr$pR))\n                        mstore(add(usr$mIn, 96), mload(add(usr$pR, 32)))\n                        switch usr$z\n                        case 1 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x4cc3aa31951fada114cbad54686e2a082df6c4fa, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        case 2 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x4cc3aa31951fada114cbad54686e2a082df6c4fa, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        default {\n                            usr$success := staticcall(add(gas(), not(1999)), 6, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        if iszero(usr$success)\n                        {\n                            mstore(/** @src -1:-1:-1 */ 0, 0)\n                            /// @src 40:11593:22282  \"assembly {...\"\n                            return(/** @src -1:-1:-1 */ 0, /** @src 40:11593:22282  \"assembly {...\" */ 32)\n                        }\n                    }\n                    function usr$g1_mulAccC_1758(usr$pR, usr$s, usr$z)\n                    {\n                        let usr$success := /** @src -1:-1:-1 */ 0\n                        /// @src 40:11593:22282  \"assembly {...\"\n                        let usr$mIn := mload(0x40)\n                        mstore(usr$mIn, 14941485327978437375521006241254634444037644973379906367567115351627139641414)\n                        mstore(add(usr$mIn, 32), 10702407562034274430221897944829443699402512693373259167588271091307663372710)\n                        let _1 := add(usr$mIn, 0x40)\n                        mstore(_1, usr$s)\n                        switch usr$z\n                        case 1 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x2abe798291c05b054475bdeb017161737a6a1b4f, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        case 2 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x2abe798291c05b054475bdeb017161737a6a1b4f, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        default {\n                            usr$success := staticcall(add(gas(), not(1999)), 7, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        if iszero(usr$success)\n                        {\n                            mstore(/** @src -1:-1:-1 */ 0, 0)\n                            /// @src 40:11593:22282  \"assembly {...\"\n                            return(/** @src -1:-1:-1 */ 0, /** @src 40:11593:22282  \"assembly {...\" */ 32)\n                        }\n                        mstore(_1, mload(usr$pR))\n                        mstore(add(usr$mIn, 96), mload(add(usr$pR, 32)))\n                        switch usr$z\n                        case 1 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x4cc3aa31951fada114cbad54686e2a082df6c4fa, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        case 2 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x4cc3aa31951fada114cbad54686e2a082df6c4fa, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        default {\n                            usr$success := staticcall(add(gas(), not(1999)), 6, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        if iszero(usr$success)\n                        {\n                            mstore(/** @src -1:-1:-1 */ 0, 0)\n                            /// @src 40:11593:22282  \"assembly {...\"\n                            return(/** @src -1:-1:-1 */ 0, /** @src 40:11593:22282  \"assembly {...\" */ 32)\n                        }\n                    }\n                    function usr$g1_mulAccC_1759(usr$pR, usr$s, usr$z)\n                    {\n                        let usr$success := /** @src -1:-1:-1 */ 0\n                        /// @src 40:11593:22282  \"assembly {...\"\n                        let usr$mIn := mload(0x40)\n                        mstore(usr$mIn, 8275896680177260146907953439805305572759478043924598922328323793281943403370)\n                        mstore(add(usr$mIn, 32), 4247674182996730416195978445155055073549714994568066175487529509583649388873)\n                        let _1 := add(usr$mIn, 0x40)\n                        mstore(_1, usr$s)\n                        switch usr$z\n                        case 1 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x2abe798291c05b054475bdeb017161737a6a1b4f, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        case 2 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x2abe798291c05b054475bdeb017161737a6a1b4f, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        default {\n                            usr$success := staticcall(add(gas(), not(1999)), 7, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        if iszero(usr$success)\n                        {\n                            mstore(/** @src -1:-1:-1 */ 0, 0)\n                            /// @src 40:11593:22282  \"assembly {...\"\n                            return(/** @src -1:-1:-1 */ 0, /** @src 40:11593:22282  \"assembly {...\" */ 32)\n                        }\n                        mstore(_1, mload(usr$pR))\n                        mstore(add(usr$mIn, 96), mload(add(usr$pR, 32)))\n                        switch usr$z\n                        case 1 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x4cc3aa31951fada114cbad54686e2a082df6c4fa, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        case 2 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x4cc3aa31951fada114cbad54686e2a082df6c4fa, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        default {\n                            usr$success := staticcall(add(gas(), not(1999)), 6, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        if iszero(usr$success)\n                        {\n                            mstore(/** @src -1:-1:-1 */ 0, 0)\n                            /// @src 40:11593:22282  \"assembly {...\"\n                            return(/** @src -1:-1:-1 */ 0, /** @src 40:11593:22282  \"assembly {...\" */ 32)\n                        }\n                    }\n                    function usr$g1_mulAccC_1760(usr$pR, usr$s, usr$z)\n                    {\n                        let usr$success := /** @src -1:-1:-1 */ 0\n                        /// @src 40:11593:22282  \"assembly {...\"\n                        let usr$mIn := mload(0x40)\n                        mstore(usr$mIn, 5689003246975774737588871342271076456426408075813318043434367952407244465697)\n                        mstore(add(usr$mIn, 32), 5331139184498747881817447962895230742876804067387026910085264060106931675015)\n                        let _1 := add(usr$mIn, 0x40)\n                        mstore(_1, usr$s)\n                        switch usr$z\n                        case 1 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x2abe798291c05b054475bdeb017161737a6a1b4f, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        case 2 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x2abe798291c05b054475bdeb017161737a6a1b4f, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        default {\n                            usr$success := staticcall(add(gas(), not(1999)), 7, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        if iszero(usr$success)\n                        {\n                            mstore(/** @src -1:-1:-1 */ 0, 0)\n                            /// @src 40:11593:22282  \"assembly {...\"\n                            return(/** @src -1:-1:-1 */ 0, /** @src 40:11593:22282  \"assembly {...\" */ 32)\n                        }\n                        mstore(_1, mload(usr$pR))\n                        mstore(add(usr$mIn, 96), mload(add(usr$pR, 32)))\n                        switch usr$z\n                        case 1 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x4cc3aa31951fada114cbad54686e2a082df6c4fa, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        case 2 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x4cc3aa31951fada114cbad54686e2a082df6c4fa, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        default {\n                            usr$success := staticcall(add(gas(), not(1999)), 6, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        if iszero(usr$success)\n                        {\n                            mstore(/** @src -1:-1:-1 */ 0, 0)\n                            /// @src 40:11593:22282  \"assembly {...\"\n                            return(/** @src -1:-1:-1 */ 0, /** @src 40:11593:22282  \"assembly {...\" */ 32)\n                        }\n                    }\n                    function usr$g1_mulAccC_1761(usr$pR, usr$s, usr$z)\n                    {\n                        let usr$success := /** @src -1:-1:-1 */ 0\n                        /// @src 40:11593:22282  \"assembly {...\"\n                        let usr$mIn := mload(0x40)\n                        mstore(usr$mIn, 9133389296516422045582607363916275184958302548102626374643142889003044665947)\n                        mstore(add(usr$mIn, 32), 21212127989644328313744743046359043793974008456261367858588476558007302881330)\n                        let _1 := add(usr$mIn, 0x40)\n                        mstore(_1, usr$s)\n                        switch usr$z\n                        case 1 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x2abe798291c05b054475bdeb017161737a6a1b4f, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        case 2 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x2abe798291c05b054475bdeb017161737a6a1b4f, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        default {\n                            usr$success := staticcall(add(gas(), not(1999)), 7, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        if iszero(usr$success)\n                        {\n                            mstore(/** @src -1:-1:-1 */ 0, 0)\n                            /// @src 40:11593:22282  \"assembly {...\"\n                            return(/** @src -1:-1:-1 */ 0, /** @src 40:11593:22282  \"assembly {...\" */ 32)\n                        }\n                        mstore(_1, mload(usr$pR))\n                        mstore(add(usr$mIn, 96), mload(add(usr$pR, 32)))\n                        switch usr$z\n                        case 1 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x4cc3aa31951fada114cbad54686e2a082df6c4fa, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        case 2 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x4cc3aa31951fada114cbad54686e2a082df6c4fa, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        default {\n                            usr$success := staticcall(add(gas(), not(1999)), 6, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        if iszero(usr$success)\n                        {\n                            mstore(/** @src -1:-1:-1 */ 0, 0)\n                            /// @src 40:11593:22282  \"assembly {...\"\n                            return(/** @src -1:-1:-1 */ 0, /** @src 40:11593:22282  \"assembly {...\" */ 32)\n                        }\n                    }\n                    function usr$g1_mulAccC_1762(usr$pR, usr$s, usr$z)\n                    {\n                        let usr$success := /** @src -1:-1:-1 */ 0\n                        /// @src 40:11593:22282  \"assembly {...\"\n                        let usr$mIn := mload(0x40)\n                        mstore(usr$mIn, 1846381662521291690941661313906009843371539776920831630929177290350683400816)\n                        mstore(add(usr$mIn, 32), 14037588365801936321970551415842797526891505906435930017587651178284699267713)\n                        let _1 := add(usr$mIn, 0x40)\n                        mstore(_1, usr$s)\n                        switch usr$z\n                        case 1 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x2abe798291c05b054475bdeb017161737a6a1b4f, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        case 2 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x2abe798291c05b054475bdeb017161737a6a1b4f, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        default {\n                            usr$success := staticcall(add(gas(), not(1999)), 7, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        if iszero(usr$success)\n                        {\n                            mstore(/** @src -1:-1:-1 */ 0, 0)\n                            /// @src 40:11593:22282  \"assembly {...\"\n                            return(/** @src -1:-1:-1 */ 0, /** @src 40:11593:22282  \"assembly {...\" */ 32)\n                        }\n                        mstore(_1, mload(usr$pR))\n                        mstore(add(usr$mIn, 96), mload(add(usr$pR, 32)))\n                        switch usr$z\n                        case 1 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x4cc3aa31951fada114cbad54686e2a082df6c4fa, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        case 2 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x4cc3aa31951fada114cbad54686e2a082df6c4fa, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        default {\n                            usr$success := staticcall(add(gas(), not(1999)), 6, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        if iszero(usr$success)\n                        {\n                            mstore(/** @src -1:-1:-1 */ 0, 0)\n                            /// @src 40:11593:22282  \"assembly {...\"\n                            return(/** @src -1:-1:-1 */ 0, /** @src 40:11593:22282  \"assembly {...\" */ 32)\n                        }\n                    }\n                    function usr$g1_mulAccC(usr$pR, usr$s, usr$z)\n                    {\n                        let usr$success := /** @src -1:-1:-1 */ 0\n                        /// @src 40:11593:22282  \"assembly {...\"\n                        let usr$mIn := mload(0x40)\n                        mstore(usr$mIn, 9781100104817210330466721014252420484088695894046800561845749556748658092046)\n                        mstore(add(usr$mIn, 32), 5247283488585909287681175111965979900241094426050812131890410213638115643151)\n                        let _1 := add(usr$mIn, 0x40)\n                        mstore(_1, usr$s)\n                        switch usr$z\n                        case 1 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x2abe798291c05b054475bdeb017161737a6a1b4f, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        case 2 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x2abe798291c05b054475bdeb017161737a6a1b4f, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        default {\n                            usr$success := staticcall(add(gas(), not(1999)), 7, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        if iszero(usr$success)\n                        {\n                            mstore(/** @src -1:-1:-1 */ 0, 0)\n                            /// @src 40:11593:22282  \"assembly {...\"\n                            return(/** @src -1:-1:-1 */ 0, /** @src 40:11593:22282  \"assembly {...\" */ 32)\n                        }\n                        mstore(_1, mload(usr$pR))\n                        mstore(add(usr$mIn, 96), mload(add(usr$pR, 32)))\n                        switch usr$z\n                        case 1 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x4cc3aa31951fada114cbad54686e2a082df6c4fa, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        case 2 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x4cc3aa31951fada114cbad54686e2a082df6c4fa, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        default {\n                            usr$success := staticcall(add(gas(), not(1999)), 6, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        if iszero(usr$success)\n                        {\n                            mstore(/** @src -1:-1:-1 */ 0, 0)\n                            /// @src 40:11593:22282  \"assembly {...\"\n                            return(/** @src -1:-1:-1 */ 0, /** @src 40:11593:22282  \"assembly {...\" */ 32)\n                        }\n                    }\n                    function usr$g1_mulAccC_1764(usr$pR, usr$s, usr$z)\n                    {\n                        let usr$success := /** @src -1:-1:-1 */ 0\n                        /// @src 40:11593:22282  \"assembly {...\"\n                        let usr$mIn := mload(0x40)\n                        mstore(usr$mIn, 2601884709396729070900092103586635418201773412881087270429648554918650589212)\n                        mstore(add(usr$mIn, 32), 9908981325212548797939830108274909156521241172863051558205007650971279318517)\n                        let _1 := add(usr$mIn, 0x40)\n                        mstore(_1, usr$s)\n                        switch usr$z\n                        case 1 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x2abe798291c05b054475bdeb017161737a6a1b4f, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        case 2 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x2abe798291c05b054475bdeb017161737a6a1b4f, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        default {\n                            usr$success := staticcall(add(gas(), not(1999)), 7, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        if iszero(usr$success)\n                        {\n                            mstore(/** @src -1:-1:-1 */ 0, 0)\n                            /// @src 40:11593:22282  \"assembly {...\"\n                            return(/** @src -1:-1:-1 */ 0, /** @src 40:11593:22282  \"assembly {...\" */ 32)\n                        }\n                        mstore(_1, mload(usr$pR))\n                        mstore(add(usr$mIn, 96), mload(add(usr$pR, 32)))\n                        switch usr$z\n                        case 1 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x4cc3aa31951fada114cbad54686e2a082df6c4fa, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        case 2 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x4cc3aa31951fada114cbad54686e2a082df6c4fa, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        default {\n                            usr$success := staticcall(add(gas(), not(1999)), 6, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        if iszero(usr$success)\n                        {\n                            mstore(/** @src -1:-1:-1 */ 0, 0)\n                            /// @src 40:11593:22282  \"assembly {...\"\n                            return(/** @src -1:-1:-1 */ 0, /** @src 40:11593:22282  \"assembly {...\" */ 32)\n                        }\n                    }\n                    function usr$g1_mulAccC_1765(usr$pR, usr$s, usr$z)\n                    {\n                        let usr$success := /** @src -1:-1:-1 */ 0\n                        /// @src 40:11593:22282  \"assembly {...\"\n                        let usr$mIn := mload(0x40)\n                        mstore(usr$mIn, 9939266818987304280716292846681442246091197219658249578844451051169120630547)\n                        mstore(add(usr$mIn, 32), 2572015044563341438903424542575536095020061887469225890988354903901552937232)\n                        let _1 := add(usr$mIn, 0x40)\n                        mstore(_1, usr$s)\n                        switch usr$z\n                        case 1 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x2abe798291c05b054475bdeb017161737a6a1b4f, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        case 2 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x2abe798291c05b054475bdeb017161737a6a1b4f, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        default {\n                            usr$success := staticcall(add(gas(), not(1999)), 7, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        if iszero(usr$success)\n                        {\n                            mstore(/** @src -1:-1:-1 */ 0, 0)\n                            /// @src 40:11593:22282  \"assembly {...\"\n                            return(/** @src -1:-1:-1 */ 0, /** @src 40:11593:22282  \"assembly {...\" */ 32)\n                        }\n                        mstore(_1, mload(usr$pR))\n                        mstore(add(usr$mIn, 96), mload(add(usr$pR, 32)))\n                        switch usr$z\n                        case 1 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x4cc3aa31951fada114cbad54686e2a082df6c4fa, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        case 2 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x4cc3aa31951fada114cbad54686e2a082df6c4fa, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        default {\n                            usr$success := staticcall(add(gas(), not(1999)), 6, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        if iszero(usr$success)\n                        {\n                            mstore(/** @src -1:-1:-1 */ 0, 0)\n                            /// @src 40:11593:22282  \"assembly {...\"\n                            return(/** @src -1:-1:-1 */ 0, /** @src 40:11593:22282  \"assembly {...\" */ 32)\n                        }\n                    }\n                    function usr$g1_mulAccC_1766(usr$pR, usr$s, usr$z)\n                    {\n                        let usr$success := /** @src -1:-1:-1 */ 0\n                        /// @src 40:11593:22282  \"assembly {...\"\n                        let usr$mIn := mload(0x40)\n                        mstore(usr$mIn, 13118893670705126645185968274218628155008227884751114852720068135196260630881)\n                        mstore(add(usr$mIn, 32), 6230722867526865558981774022287077378574474669760549030286133277816703673143)\n                        let _1 := add(usr$mIn, 0x40)\n                        mstore(_1, usr$s)\n                        switch usr$z\n                        case 1 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x2abe798291c05b054475bdeb017161737a6a1b4f, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        case 2 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x2abe798291c05b054475bdeb017161737a6a1b4f, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        default {\n                            usr$success := staticcall(add(gas(), not(1999)), 7, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        if iszero(usr$success)\n                        {\n                            mstore(/** @src -1:-1:-1 */ 0, 0)\n                            /// @src 40:11593:22282  \"assembly {...\"\n                            return(/** @src -1:-1:-1 */ 0, /** @src 40:11593:22282  \"assembly {...\" */ 32)\n                        }\n                        mstore(_1, mload(usr$pR))\n                        mstore(add(usr$mIn, 96), mload(add(usr$pR, 32)))\n                        switch usr$z\n                        case 1 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x4cc3aa31951fada114cbad54686e2a082df6c4fa, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        case 2 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x4cc3aa31951fada114cbad54686e2a082df6c4fa, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        default {\n                            usr$success := staticcall(add(gas(), not(1999)), 6, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        if iszero(usr$success)\n                        {\n                            mstore(/** @src -1:-1:-1 */ 0, 0)\n                            /// @src 40:11593:22282  \"assembly {...\"\n                            return(/** @src -1:-1:-1 */ 0, /** @src 40:11593:22282  \"assembly {...\" */ 32)\n                        }\n                    }\n                    function usr$g1_mulAccC_1767(usr$pR, usr$s, usr$z)\n                    {\n                        let usr$success := /** @src -1:-1:-1 */ 0\n                        /// @src 40:11593:22282  \"assembly {...\"\n                        let usr$mIn := mload(0x40)\n                        mstore(usr$mIn, 17212407207955414163237618089196466668701707894128397707051726962337098549169)\n                        mstore(add(usr$mIn, 32), 8404846513505663468605283225980364311579458231305844344066234966448248022846)\n                        let _1 := add(usr$mIn, 0x40)\n                        mstore(_1, usr$s)\n                        switch usr$z\n                        case 1 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x2abe798291c05b054475bdeb017161737a6a1b4f, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        case 2 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x2abe798291c05b054475bdeb017161737a6a1b4f, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        default {\n                            usr$success := staticcall(add(gas(), not(1999)), 7, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        if iszero(usr$success)\n                        {\n                            mstore(/** @src -1:-1:-1 */ 0, 0)\n                            /// @src 40:11593:22282  \"assembly {...\"\n                            return(/** @src -1:-1:-1 */ 0, /** @src 40:11593:22282  \"assembly {...\" */ 32)\n                        }\n                        mstore(_1, mload(usr$pR))\n                        mstore(add(usr$mIn, 96), mload(add(usr$pR, 32)))\n                        switch usr$z\n                        case 1 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x4cc3aa31951fada114cbad54686e2a082df6c4fa, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        case 2 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x4cc3aa31951fada114cbad54686e2a082df6c4fa, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        default {\n                            usr$success := staticcall(add(gas(), not(1999)), 6, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        if iszero(usr$success)\n                        {\n                            mstore(/** @src -1:-1:-1 */ 0, 0)\n                            /// @src 40:11593:22282  \"assembly {...\"\n                            return(/** @src -1:-1:-1 */ 0, /** @src 40:11593:22282  \"assembly {...\" */ 32)\n                        }\n                    }\n                    function usr$g1_mulAccC_1768(usr$pR, usr$s, usr$z)\n                    {\n                        let usr$success := /** @src -1:-1:-1 */ 0\n                        /// @src 40:11593:22282  \"assembly {...\"\n                        let usr$mIn := mload(0x40)\n                        mstore(usr$mIn, 11738484603497709502459820489878480711987723990943728339865918189223648597498)\n                        mstore(add(usr$mIn, 32), 4876663067150136827802187921986818211983158246723787276826534383019800886864)\n                        let _1 := add(usr$mIn, 0x40)\n                        mstore(_1, usr$s)\n                        switch usr$z\n                        case 1 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x2abe798291c05b054475bdeb017161737a6a1b4f, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        case 2 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x2abe798291c05b054475bdeb017161737a6a1b4f, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        default {\n                            usr$success := staticcall(add(gas(), not(1999)), 7, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        if iszero(usr$success)\n                        {\n                            mstore(/** @src -1:-1:-1 */ 0, 0)\n                            /// @src 40:11593:22282  \"assembly {...\"\n                            return(/** @src -1:-1:-1 */ 0, /** @src 40:11593:22282  \"assembly {...\" */ 32)\n                        }\n                        mstore(_1, mload(usr$pR))\n                        mstore(add(usr$mIn, 96), mload(add(usr$pR, 32)))\n                        switch usr$z\n                        case 1 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x4cc3aa31951fada114cbad54686e2a082df6c4fa, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        case 2 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x4cc3aa31951fada114cbad54686e2a082df6c4fa, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        default {\n                            usr$success := staticcall(add(gas(), not(1999)), 6, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        if iszero(usr$success)\n                        {\n                            mstore(/** @src -1:-1:-1 */ 0, 0)\n                            /// @src 40:11593:22282  \"assembly {...\"\n                            return(/** @src -1:-1:-1 */ 0, /** @src 40:11593:22282  \"assembly {...\" */ 32)\n                        }\n                    }\n                    function usr$g1_mulAccC_1769(usr$pR, usr$s, usr$z)\n                    {\n                        let usr$success := /** @src -1:-1:-1 */ 0\n                        /// @src 40:11593:22282  \"assembly {...\"\n                        let usr$mIn := mload(0x40)\n                        mstore(usr$mIn, 10388736566666345681097260475847864743327046424517259125467497894377198799740)\n                        mstore(add(usr$mIn, 32), 18058504066267363666256588143336895545386092144245446448007719752461244713629)\n                        let _1 := add(usr$mIn, 0x40)\n                        mstore(_1, usr$s)\n                        switch usr$z\n                        case 1 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x2abe798291c05b054475bdeb017161737a6a1b4f, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        case 2 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x2abe798291c05b054475bdeb017161737a6a1b4f, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        default {\n                            usr$success := staticcall(add(gas(), not(1999)), 7, usr$mIn, 96, usr$mIn, 0x40)\n                        }\n                        if iszero(usr$success)\n                        {\n                            mstore(/** @src -1:-1:-1 */ 0, 0)\n                            /// @src 40:11593:22282  \"assembly {...\"\n                            return(/** @src -1:-1:-1 */ 0, /** @src 40:11593:22282  \"assembly {...\" */ 32)\n                        }\n                        mstore(_1, mload(usr$pR))\n                        mstore(add(usr$mIn, 96), mload(add(usr$pR, 32)))\n                        switch usr$z\n                        case 1 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x4cc3aa31951fada114cbad54686e2a082df6c4fa, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        case 2 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x4cc3aa31951fada114cbad54686e2a082df6c4fa, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        default {\n                            usr$success := staticcall(add(gas(), not(1999)), 6, usr$mIn, 128, usr$pR, 0x40)\n                        }\n                        if iszero(usr$success)\n                        {\n                            mstore(/** @src -1:-1:-1 */ 0, 0)\n                            /// @src 40:11593:22282  \"assembly {...\"\n                            return(/** @src -1:-1:-1 */ 0, /** @src 40:11593:22282  \"assembly {...\" */ 32)\n                        }\n                    }\n                    function usr$checkPairing(usr$pA, usr$pC, usr$z) -> usr$isOk\n                    {\n                        mstore(/** @src 40:831:22292  \"contract Groth16Verifier {...\" */ 128, /** @src 40:11593:22282  \"assembly {...\" */ 5901406458595327327953646561359621442218448144107991955344827840671354857930)\n                        mstore(160, 21253883398616811363937453025480398551698716152192802899988370991179418894921)\n                        usr$g1_mulAccC_1736(/** @src 40:831:22292  \"contract Groth16Verifier {...\" */ 128, /** @src 40:11593:22282  \"assembly {...\" */ calldataload(/** @src 40:831:22292  \"contract Groth16Verifier {...\" */ 260), /** @src 40:11593:22282  \"assembly {...\" */ usr$z)\n                        usr$g1_mulAccC_1737(/** @src 40:831:22292  \"contract Groth16Verifier {...\" */ 128, /** @src 40:11593:22282  \"assembly {...\" */ calldataload(292), usr$z)\n                        usr$g1_mulAccC_1738(/** @src 40:831:22292  \"contract Groth16Verifier {...\" */ 128, /** @src 40:11593:22282  \"assembly {...\" */ calldataload(324), usr$z)\n                        usr$g1_mulAccC_1739(/** @src 40:831:22292  \"contract Groth16Verifier {...\" */ 128, /** @src 40:11593:22282  \"assembly {...\" */ calldataload(356), usr$z)\n                        usr$g1_mulAccC_1740(/** @src 40:831:22292  \"contract Groth16Verifier {...\" */ 128, /** @src 40:11593:22282  \"assembly {...\" */ calldataload(388), usr$z)\n                        usr$g1_mulAccC_1741(/** @src 40:831:22292  \"contract Groth16Verifier {...\" */ 128, /** @src 40:11593:22282  \"assembly {...\" */ calldataload(420), usr$z)\n                        usr$g1_mulAccC_1742(/** @src 40:831:22292  \"contract Groth16Verifier {...\" */ 128, /** @src 40:11593:22282  \"assembly {...\" */ calldataload(452), usr$z)\n                        usr$g1_mulAccC_1743(/** @src 40:831:22292  \"contract Groth16Verifier {...\" */ 128, /** @src 40:11593:22282  \"assembly {...\" */ calldataload(484), usr$z)\n                        usr$g1_mulAccC_1744(/** @src 40:831:22292  \"contract Groth16Verifier {...\" */ 128, /** @src 40:11593:22282  \"assembly {...\" */ calldataload(516), usr$z)\n                        usr$g1_mulAccC_1745(/** @src 40:831:22292  \"contract Groth16Verifier {...\" */ 128, /** @src 40:11593:22282  \"assembly {...\" */ calldataload(548), usr$z)\n                        usr$g1_mulAccC_1746(/** @src 40:831:22292  \"contract Groth16Verifier {...\" */ 128, /** @src 40:11593:22282  \"assembly {...\" */ calldataload(580), usr$z)\n                        usr$g1_mulAccC_1747(/** @src 40:831:22292  \"contract Groth16Verifier {...\" */ 128, /** @src 40:11593:22282  \"assembly {...\" */ calldataload(612), usr$z)\n                        usr$g1_mulAccC_1748(/** @src 40:831:22292  \"contract Groth16Verifier {...\" */ 128, /** @src 40:11593:22282  \"assembly {...\" */ calldataload(644), usr$z)\n                        usr$g1_mulAccC_1749(/** @src 40:831:22292  \"contract Groth16Verifier {...\" */ 128, /** @src 40:11593:22282  \"assembly {...\" */ calldataload(676), usr$z)\n                        usr$g1_mulAccC_1750(/** @src 40:831:22292  \"contract Groth16Verifier {...\" */ 128, /** @src 40:11593:22282  \"assembly {...\" */ calldataload(708), usr$z)\n                        usr$g1_mulAccC_1751(/** @src 40:831:22292  \"contract Groth16Verifier {...\" */ 128, /** @src 40:11593:22282  \"assembly {...\" */ calldataload(740), usr$z)\n                        usr$g1_mulAccC_1752(/** @src 40:831:22292  \"contract Groth16Verifier {...\" */ 128, /** @src 40:11593:22282  \"assembly {...\" */ calldataload(772), usr$z)\n                        usr$g1_mulAccC_1753(/** @src 40:831:22292  \"contract Groth16Verifier {...\" */ 128, /** @src 40:11593:22282  \"assembly {...\" */ calldataload(804), usr$z)\n                        usr$g1_mulAccC_1754(/** @src 40:831:22292  \"contract Groth16Verifier {...\" */ 128, /** @src 40:11593:22282  \"assembly {...\" */ calldataload(836), usr$z)\n                        usr$g1_mulAccC_1755(/** @src 40:831:22292  \"contract Groth16Verifier {...\" */ 128, /** @src 40:11593:22282  \"assembly {...\" */ calldataload(868), usr$z)\n                        usr$g1_mulAccC_1756(/** @src 40:831:22292  \"contract Groth16Verifier {...\" */ 128, /** @src 40:11593:22282  \"assembly {...\" */ calldataload(900), usr$z)\n                        usr$g1_mulAccC_1757(/** @src 40:831:22292  \"contract Groth16Verifier {...\" */ 128, /** @src 40:11593:22282  \"assembly {...\" */ calldataload(932), usr$z)\n                        usr$g1_mulAccC_1758(/** @src 40:831:22292  \"contract Groth16Verifier {...\" */ 128, /** @src 40:11593:22282  \"assembly {...\" */ calldataload(964), usr$z)\n                        usr$g1_mulAccC_1759(/** @src 40:831:22292  \"contract Groth16Verifier {...\" */ 128, /** @src 40:11593:22282  \"assembly {...\" */ calldataload(996), usr$z)\n                        usr$g1_mulAccC_1760(/** @src 40:831:22292  \"contract Groth16Verifier {...\" */ 128, /** @src 40:11593:22282  \"assembly {...\" */ calldataload(1028), usr$z)\n                        usr$g1_mulAccC_1761(/** @src 40:831:22292  \"contract Groth16Verifier {...\" */ 128, /** @src 40:11593:22282  \"assembly {...\" */ calldataload(1060), usr$z)\n                        usr$g1_mulAccC_1762(/** @src 40:831:22292  \"contract Groth16Verifier {...\" */ 128, /** @src 40:11593:22282  \"assembly {...\" */ calldataload(1092), usr$z)\n                        usr$g1_mulAccC(/** @src 40:831:22292  \"contract Groth16Verifier {...\" */ 128, /** @src 40:11593:22282  \"assembly {...\" */ calldataload(1124), usr$z)\n                        usr$g1_mulAccC_1764(/** @src 40:831:22292  \"contract Groth16Verifier {...\" */ 128, /** @src 40:11593:22282  \"assembly {...\" */ calldataload(1156), usr$z)\n                        usr$g1_mulAccC_1765(/** @src 40:831:22292  \"contract Groth16Verifier {...\" */ 128, /** @src 40:11593:22282  \"assembly {...\" */ calldataload(1188), usr$z)\n                        usr$g1_mulAccC_1766(/** @src 40:831:22292  \"contract Groth16Verifier {...\" */ 128, /** @src 40:11593:22282  \"assembly {...\" */ calldataload(1220), usr$z)\n                        usr$g1_mulAccC_1767(/** @src 40:831:22292  \"contract Groth16Verifier {...\" */ 128, /** @src 40:11593:22282  \"assembly {...\" */ calldataload(1252), usr$z)\n                        usr$g1_mulAccC_1768(/** @src 40:831:22292  \"contract Groth16Verifier {...\" */ 128, /** @src 40:11593:22282  \"assembly {...\" */ calldataload(1284), usr$z)\n                        usr$g1_mulAccC_1769(/** @src 40:831:22292  \"contract Groth16Verifier {...\" */ 128, /** @src 40:11593:22282  \"assembly {...\" */ calldataload(1316), usr$z)\n                        mstore(256, calldataload(usr$pA))\n                        mstore(288, mod(sub(21888242871839275222246405745257275088696311157297823662689037894645226208583, calldataload(add(usr$pA, 32))), 21888242871839275222246405745257275088696311157297823662689037894645226208583))\n                        mstore(320, calldataload(/** @src 40:831:22292  \"contract Groth16Verifier {...\" */ 68))\n                        /// @src 40:11593:22282  \"assembly {...\"\n                        mstore(352, calldataload(100))\n                        mstore(384, calldataload(132))\n                        mstore(416, calldataload(164))\n                        mstore(448, 20491192805390485299153009773594534940189261866228447918068658471970481763042)\n                        mstore(480, 9383485363053290200918347156157836566562967994039712273449902621266178545958)\n                        mstore(512, 4252822878758300859123897981450591353533073413197771768651442665752259397132)\n                        mstore(544, 6375614351688725206403948262868962793625744043794305715222011528459656738731)\n                        mstore(576, 21847035105528745403288232691147584728191162732299865338377159692350059136679)\n                        mstore(608, 10505242626370262277552901082094356697409835680220590971873171140371331206856)\n                        mstore(640, mload(/** @src 40:831:22292  \"contract Groth16Verifier {...\" */ 128))\n                        /// @src 40:11593:22282  \"assembly {...\"\n                        mstore(672, mload(160))\n                        mstore(704, 11559732032986387107991004021392285783925812861821192530917403151452391805634)\n                        mstore(736, 10857046999023057135944570762232829481370756359578518086990519993285655852781)\n                        mstore(768, 4082367875863433681332203403145435568316851327593401208105741076214120093531)\n                        mstore(800, 8495653923123431417604973247489272438418190587263600148770280649306958101930)\n                        mstore(832, calldataload(usr$pC))\n                        mstore(864, calldataload(add(usr$pC, 32)))\n                        mstore(896, 12348375662783824431360707906202475009449369812921990201376235771680861701966)\n                        mstore(928, 1390621091717691233659791897033569945783127756008503250856151404215287127098)\n                        mstore(960, 21545653682963288007472972452138234474169143155774752223643789231933860474340)\n                        mstore(992, 10610549897370405036411988417557836327116891506639515374316821127902275605593)\n                        let usr$success := false\n                        switch usr$z\n                        case 1 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x9f7d2961d2e522d5b1407dd1e364a520ddc8a77f, 256, 768, 256, 32)\n                        }\n                        case 2 {\n                            usr$success := staticcall(add(gas(), not(1999)), 0x9f7d2961d2e522d5b1407dd1e364a520ddc8a77f, 256, 768, 256, 32)\n                        }\n                        default {\n                            usr$success := staticcall(add(gas(), not(1999)), 8, 256, 768, 256, 32)\n                        }\n                        usr$isOk := and(usr$success, mload(256))\n                    }\n                }\n                data \".metadata\" hex\"a2646970667358221220d6812ceb8e0008a39bc1d8eb2bf7540572148e27d113516d9980141531397a4c64736f6c634300081a0033\"\n            }\n        }\n        data \".metadata\" hex\"a26469706673582212201e00e833485c64bd7dda49c49ccec6af1c301a44a7bf73f18403fde1006638b564736f6c634300081a0033\"\n    }\n}\n","hash":"010001ff827e2f792383a7ee19d01e0db1dc0a43f70a21a777c500d69ec0a012","factoryDependencies":{"010004db5aabc34c32e1a26e3fa447cb2c92ad037b8fcf74c215d2f4bb6d0f02":"node_modules/ether-email-auth/packages/contracts/src/utils/Groth16Verifier.sol:Groth16Verifier"},"id":41}